#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ERPManagement.Model
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="ERPManagement")]
	public partial class ERPManagementDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCompany(Company instance);
    partial void UpdateCompany(Company instance);
    partial void DeleteCompany(Company instance);
    partial void InsertDepartment(Department instance);
    partial void UpdateDepartment(Department instance);
    partial void DeleteDepartment(Department instance);
    partial void InsertUnitMeasure(UnitMeasure instance);
    partial void UpdateUnitMeasure(UnitMeasure instance);
    partial void DeleteUnitMeasure(UnitMeasure instance);
    partial void InsertMethod(Method instance);
    partial void UpdateMethod(Method instance);
    partial void DeleteMethod(Method instance);
    partial void InsertEquipmentType(EquipmentType instance);
    partial void UpdateEquipmentType(EquipmentType instance);
    partial void DeleteEquipmentType(EquipmentType instance);
    partial void InsertEquipmentImportationDetail(EquipmentImportationDetail instance);
    partial void UpdateEquipmentImportationDetail(EquipmentImportationDetail instance);
    partial void DeleteEquipmentImportationDetail(EquipmentImportationDetail instance);
    partial void InsertEquipmentImportation(EquipmentImportation instance);
    partial void UpdateEquipmentImportation(EquipmentImportation instance);
    partial void DeleteEquipmentImportation(EquipmentImportation instance);
    partial void InsertEquipmentExportation(EquipmentExportation instance);
    partial void UpdateEquipmentExportation(EquipmentExportation instance);
    partial void DeleteEquipmentExportation(EquipmentExportation instance);
    partial void InsertEquipmentExportationDetail(EquipmentExportationDetail instance);
    partial void UpdateEquipmentExportationDetail(EquipmentExportationDetail instance);
    partial void DeleteEquipmentExportationDetail(EquipmentExportationDetail instance);
    partial void InsertRegency(Regency instance);
    partial void UpdateRegency(Regency instance);
    partial void DeleteRegency(Regency instance);
    partial void InsertWareHouse(WareHouse instance);
    partial void UpdateWareHouse(WareHouse instance);
    partial void DeleteWareHouse(WareHouse instance);
    partial void InsertEquipmentHandOverDetail(EquipmentHandOverDetail instance);
    partial void UpdateEquipmentHandOverDetail(EquipmentHandOverDetail instance);
    partial void DeleteEquipmentHandOverDetail(EquipmentHandOverDetail instance);
    partial void InsertEquipmentHandOverReceiver(EquipmentHandOverReceiver instance);
    partial void UpdateEquipmentHandOverReceiver(EquipmentHandOverReceiver instance);
    partial void DeleteEquipmentHandOverReceiver(EquipmentHandOverReceiver instance);
    partial void InsertEquipmentHandOverSender(EquipmentHandOverSender instance);
    partial void UpdateEquipmentHandOverSender(EquipmentHandOverSender instance);
    partial void DeleteEquipmentHandOverSender(EquipmentHandOverSender instance);
    partial void InsertEquipmentHandOver(EquipmentHandOver instance);
    partial void UpdateEquipmentHandOver(EquipmentHandOver instance);
    partial void DeleteEquipmentHandOver(EquipmentHandOver instance);
    partial void InsertEquipmentStatusNoteBook(EquipmentStatusNoteBook instance);
    partial void UpdateEquipmentStatusNoteBook(EquipmentStatusNoteBook instance);
    partial void DeleteEquipmentStatusNoteBook(EquipmentStatusNoteBook instance);
    partial void InsertEquipmentStatusNoteBookDetail(EquipmentStatusNoteBookDetail instance);
    partial void UpdateEquipmentStatusNoteBookDetail(EquipmentStatusNoteBookDetail instance);
    partial void DeleteEquipmentStatusNoteBookDetail(EquipmentStatusNoteBookDetail instance);
    partial void InsertEquipmentReturning(EquipmentReturning instance);
    partial void UpdateEquipmentReturning(EquipmentReturning instance);
    partial void DeleteEquipmentReturning(EquipmentReturning instance);
    partial void InsertEquipmentReturningReceiver(EquipmentReturningReceiver instance);
    partial void UpdateEquipmentReturningReceiver(EquipmentReturningReceiver instance);
    partial void DeleteEquipmentReturningReceiver(EquipmentReturningReceiver instance);
    partial void InsertEquipmentReturningSender(EquipmentReturningSender instance);
    partial void UpdateEquipmentReturningSender(EquipmentReturningSender instance);
    partial void DeleteEquipmentReturningSender(EquipmentReturningSender instance);
    partial void InsertEquipmentReturningDetail(EquipmentReturningDetail instance);
    partial void UpdateEquipmentReturningDetail(EquipmentReturningDetail instance);
    partial void DeleteEquipmentReturningDetail(EquipmentReturningDetail instance);
    partial void InsertEquipmentTransfer(EquipmentTransfer instance);
    partial void UpdateEquipmentTransfer(EquipmentTransfer instance);
    partial void DeleteEquipmentTransfer(EquipmentTransfer instance);
    partial void InsertEquipmentTransferDetail(EquipmentTransferDetail instance);
    partial void UpdateEquipmentTransferDetail(EquipmentTransferDetail instance);
    partial void DeleteEquipmentTransferDetail(EquipmentTransferDetail instance);
    partial void InsertEquipmentTransferReceiver(EquipmentTransferReceiver instance);
    partial void UpdateEquipmentTransferReceiver(EquipmentTransferReceiver instance);
    partial void DeleteEquipmentTransferReceiver(EquipmentTransferReceiver instance);
    partial void InsertEquipmentTransferSender(EquipmentTransferSender instance);
    partial void UpdateEquipmentTransferSender(EquipmentTransferSender instance);
    partial void DeleteEquipmentTransferSender(EquipmentTransferSender instance);
    partial void InsertEquipmentBreak(EquipmentBreak instance);
    partial void UpdateEquipmentBreak(EquipmentBreak instance);
    partial void DeleteEquipmentBreak(EquipmentBreak instance);
    partial void InsertEquipmentBreakReport(EquipmentBreakReport instance);
    partial void UpdateEquipmentBreakReport(EquipmentBreakReport instance);
    partial void DeleteEquipmentBreakReport(EquipmentBreakReport instance);
    partial void InsertEquipmentBreakReportManager(EquipmentBreakReportManager instance);
    partial void UpdateEquipmentBreakReportManager(EquipmentBreakReportManager instance);
    partial void DeleteEquipmentBreakReportManager(EquipmentBreakReportManager instance);
    partial void InsertEquipmentBreakReportUser(EquipmentBreakReportUser instance);
    partial void UpdateEquipmentBreakReportUser(EquipmentBreakReportUser instance);
    partial void DeleteEquipmentBreakReportUser(EquipmentBreakReportUser instance);
    partial void InsertEmployee(Employee instance);
    partial void UpdateEmployee(Employee instance);
    partial void DeleteEmployee(Employee instance);
    partial void InsertPermission(Permission instance);
    partial void UpdatePermission(Permission instance);
    partial void DeletePermission(Permission instance);
    partial void InsertEquipment(Equipment instance);
    partial void UpdateEquipment(Equipment instance);
    partial void DeleteEquipment(Equipment instance);
    partial void InsertEquipmentTransferITManager(EquipmentTransferITManager instance);
    partial void UpdateEquipmentTransferITManager(EquipmentTransferITManager instance);
    partial void DeleteEquipmentTransferITManager(EquipmentTransferITManager instance);
    partial void InsertNational(National instance);
    partial void UpdateNational(National instance);
    partial void DeleteNational(National instance);
    #endregion
		
		public ERPManagementDataContext() : 
				base(global::ERPManagement.Properties.Settings.Default.ERPManagementConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public ERPManagementDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ERPManagementDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ERPManagementDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ERPManagementDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Company> Companies
		{
			get
			{
				return this.GetTable<Company>();
			}
		}
		
		public System.Data.Linq.Table<Department> Departments
		{
			get
			{
				return this.GetTable<Department>();
			}
		}
		
		public System.Data.Linq.Table<UnitMeasure> UnitMeasures
		{
			get
			{
				return this.GetTable<UnitMeasure>();
			}
		}
		
		public System.Data.Linq.Table<Method> Methods
		{
			get
			{
				return this.GetTable<Method>();
			}
		}
		
		public System.Data.Linq.Table<EquipmentType> EquipmentTypes
		{
			get
			{
				return this.GetTable<EquipmentType>();
			}
		}
		
		public System.Data.Linq.Table<EquipmentImportationDetail> EquipmentImportationDetails
		{
			get
			{
				return this.GetTable<EquipmentImportationDetail>();
			}
		}
		
		public System.Data.Linq.Table<EquipmentImportation> EquipmentImportations
		{
			get
			{
				return this.GetTable<EquipmentImportation>();
			}
		}
		
		public System.Data.Linq.Table<EquipmentExportation> EquipmentExportations
		{
			get
			{
				return this.GetTable<EquipmentExportation>();
			}
		}
		
		public System.Data.Linq.Table<EquipmentExportationDetail> EquipmentExportationDetails
		{
			get
			{
				return this.GetTable<EquipmentExportationDetail>();
			}
		}
		
		public System.Data.Linq.Table<Regency> Regencies
		{
			get
			{
				return this.GetTable<Regency>();
			}
		}
		
		public System.Data.Linq.Table<WareHouse> WareHouses
		{
			get
			{
				return this.GetTable<WareHouse>();
			}
		}
		
		public System.Data.Linq.Table<EquipmentHandOverDetail> EquipmentHandOverDetails
		{
			get
			{
				return this.GetTable<EquipmentHandOverDetail>();
			}
		}
		
		public System.Data.Linq.Table<EquipmentHandOverReceiver> EquipmentHandOverReceivers
		{
			get
			{
				return this.GetTable<EquipmentHandOverReceiver>();
			}
		}
		
		public System.Data.Linq.Table<EquipmentHandOverSender> EquipmentHandOverSenders
		{
			get
			{
				return this.GetTable<EquipmentHandOverSender>();
			}
		}
		
		public System.Data.Linq.Table<EquipmentHandOver> EquipmentHandOvers
		{
			get
			{
				return this.GetTable<EquipmentHandOver>();
			}
		}
		
		public System.Data.Linq.Table<EquipmentStatusNoteBook> EquipmentStatusNoteBooks
		{
			get
			{
				return this.GetTable<EquipmentStatusNoteBook>();
			}
		}
		
		public System.Data.Linq.Table<EquipmentStatusNoteBookDetail> EquipmentStatusNoteBookDetails
		{
			get
			{
				return this.GetTable<EquipmentStatusNoteBookDetail>();
			}
		}
		
		public System.Data.Linq.Table<EquipmentReturning> EquipmentReturnings
		{
			get
			{
				return this.GetTable<EquipmentReturning>();
			}
		}
		
		public System.Data.Linq.Table<EquipmentReturningReceiver> EquipmentReturningReceivers
		{
			get
			{
				return this.GetTable<EquipmentReturningReceiver>();
			}
		}
		
		public System.Data.Linq.Table<EquipmentReturningSender> EquipmentReturningSenders
		{
			get
			{
				return this.GetTable<EquipmentReturningSender>();
			}
		}
		
		public System.Data.Linq.Table<EquipmentReturningDetail> EquipmentReturningDetails
		{
			get
			{
				return this.GetTable<EquipmentReturningDetail>();
			}
		}
		
		public System.Data.Linq.Table<EquipmentTransfer> EquipmentTransfers
		{
			get
			{
				return this.GetTable<EquipmentTransfer>();
			}
		}
		
		public System.Data.Linq.Table<EquipmentTransferDetail> EquipmentTransferDetails
		{
			get
			{
				return this.GetTable<EquipmentTransferDetail>();
			}
		}
		
		public System.Data.Linq.Table<EquipmentTransferReceiver> EquipmentTransferReceivers
		{
			get
			{
				return this.GetTable<EquipmentTransferReceiver>();
			}
		}
		
		public System.Data.Linq.Table<EquipmentTransferSender> EquipmentTransferSenders
		{
			get
			{
				return this.GetTable<EquipmentTransferSender>();
			}
		}
		
		public System.Data.Linq.Table<EquipmentBreak> EquipmentBreaks
		{
			get
			{
				return this.GetTable<EquipmentBreak>();
			}
		}
		
		public System.Data.Linq.Table<EquipmentBreakReport> EquipmentBreakReports
		{
			get
			{
				return this.GetTable<EquipmentBreakReport>();
			}
		}
		
		public System.Data.Linq.Table<EquipmentBreakReportManager> EquipmentBreakReportManagers
		{
			get
			{
				return this.GetTable<EquipmentBreakReportManager>();
			}
		}
		
		public System.Data.Linq.Table<EquipmentBreakReportUser> EquipmentBreakReportUsers
		{
			get
			{
				return this.GetTable<EquipmentBreakReportUser>();
			}
		}
		
		public System.Data.Linq.Table<Employee> Employees
		{
			get
			{
				return this.GetTable<Employee>();
			}
		}
		
		public System.Data.Linq.Table<Permission> Permissions
		{
			get
			{
				return this.GetTable<Permission>();
			}
		}
		
		public System.Data.Linq.Table<Equipment> Equipments
		{
			get
			{
				return this.GetTable<Equipment>();
			}
		}
		
		public System.Data.Linq.Table<EquipmentTransferITManager> EquipmentTransferITManagers
		{
			get
			{
				return this.GetTable<EquipmentTransferITManager>();
			}
		}
		
		public System.Data.Linq.Table<National> Nationals
		{
			get
			{
				return this.GetTable<National>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Company")]
	public partial class Company : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CompanyID;
		
		private string _Code;
		
		private string _Name;
		
		private string _PhoneNumber;
		
		private string _Email;
		
		private EntitySet<Department> _Departments;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCompanyIDChanging(int value);
    partial void OnCompanyIDChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPhoneNumberChanging(string value);
    partial void OnPhoneNumberChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    #endregion
		
		public Company()
		{
			this._Departments = new EntitySet<Department>(new Action<Department>(this.attach_Departments), new Action<Department>(this.detach_Departments));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CompanyID
		{
			get
			{
				return this._CompanyID;
			}
			set
			{
				if ((this._CompanyID != value))
				{
					this.OnCompanyIDChanging(value);
					this.SendPropertyChanging();
					this._CompanyID = value;
					this.SendPropertyChanged("CompanyID");
					this.OnCompanyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumber", DbType="VarChar(15)")]
		public string PhoneNumber
		{
			get
			{
				return this._PhoneNumber;
			}
			set
			{
				if ((this._PhoneNumber != value))
				{
					this.OnPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumber = value;
					this.SendPropertyChanged("PhoneNumber");
					this.OnPhoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(150)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_Department", Storage="_Departments", ThisKey="CompanyID", OtherKey="CompanyID")]
		public EntitySet<Department> Departments
		{
			get
			{
				return this._Departments;
			}
			set
			{
				this._Departments.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Departments(Department entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_Departments(Department entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Department")]
	public partial class Department : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DepartmentID;
		
		private string _Code;
		
		private string _Name;
		
		private string _Note;
		
		private int _CompanyID;
		
		private EntitySet<EquipmentHandOver> _EquipmentHandOvers;
		
		private EntitySet<Employee> _Employees;
		
		private EntityRef<Company> _Company;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDepartmentIDChanging(int value);
    partial void OnDepartmentIDChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    partial void OnCompanyIDChanging(int value);
    partial void OnCompanyIDChanged();
    #endregion
		
		public Department()
		{
			this._EquipmentHandOvers = new EntitySet<EquipmentHandOver>(new Action<EquipmentHandOver>(this.attach_EquipmentHandOvers), new Action<EquipmentHandOver>(this.detach_EquipmentHandOvers));
			this._Employees = new EntitySet<Employee>(new Action<Employee>(this.attach_Employees), new Action<Employee>(this.detach_Employees));
			this._Company = default(EntityRef<Company>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepartmentID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DepartmentID
		{
			get
			{
				return this._DepartmentID;
			}
			set
			{
				if ((this._DepartmentID != value))
				{
					this.OnDepartmentIDChanging(value);
					this.SendPropertyChanging();
					this._DepartmentID = value;
					this.SendPropertyChanged("DepartmentID");
					this.OnDepartmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Note", DbType="NVarChar(250)")]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this.OnNoteChanging(value);
					this.SendPropertyChanging();
					this._Note = value;
					this.SendPropertyChanged("Note");
					this.OnNoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyID", DbType="Int NOT NULL")]
		public int CompanyID
		{
			get
			{
				return this._CompanyID;
			}
			set
			{
				if ((this._CompanyID != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIDChanging(value);
					this.SendPropertyChanging();
					this._CompanyID = value;
					this.SendPropertyChanged("CompanyID");
					this.OnCompanyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_EquipmentHandOver", Storage="_EquipmentHandOvers", ThisKey="DepartmentID", OtherKey="DepartmentID")]
		public EntitySet<EquipmentHandOver> EquipmentHandOvers
		{
			get
			{
				return this._EquipmentHandOvers;
			}
			set
			{
				this._EquipmentHandOvers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_Employee", Storage="_Employees", ThisKey="DepartmentID", OtherKey="DepartmentID")]
		public EntitySet<Employee> Employees
		{
			get
			{
				return this._Employees;
			}
			set
			{
				this._Employees.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_Department", Storage="_Company", ThisKey="CompanyID", OtherKey="CompanyID", IsForeignKey=true)]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.Departments.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.Departments.Add(this);
						this._CompanyID = value.CompanyID;
					}
					else
					{
						this._CompanyID = default(int);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EquipmentHandOvers(EquipmentHandOver entity)
		{
			this.SendPropertyChanging();
			entity.Department = this;
		}
		
		private void detach_EquipmentHandOvers(EquipmentHandOver entity)
		{
			this.SendPropertyChanging();
			entity.Department = null;
		}
		
		private void attach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.Department = this;
		}
		
		private void detach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.Department = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UnitMeasure")]
	public partial class UnitMeasure : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UnitMeasureID;
		
		private string _Code;
		
		private string _Name;
		
		private string _Note;
		
		private EntitySet<Equipment> _Equipments;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUnitMeasureIDChanging(int value);
    partial void OnUnitMeasureIDChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    #endregion
		
		public UnitMeasure()
		{
			this._Equipments = new EntitySet<Equipment>(new Action<Equipment>(this.attach_Equipments), new Action<Equipment>(this.detach_Equipments));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnitMeasureID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UnitMeasureID
		{
			get
			{
				return this._UnitMeasureID;
			}
			set
			{
				if ((this._UnitMeasureID != value))
				{
					this.OnUnitMeasureIDChanging(value);
					this.SendPropertyChanging();
					this._UnitMeasureID = value;
					this.SendPropertyChanged("UnitMeasureID");
					this.OnUnitMeasureIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Note", DbType="NVarChar(250)")]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this.OnNoteChanging(value);
					this.SendPropertyChanging();
					this._Note = value;
					this.SendPropertyChanged("Note");
					this.OnNoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UnitMeasure_Equipment", Storage="_Equipments", ThisKey="UnitMeasureID", OtherKey="UnitMeasureID")]
		public EntitySet<Equipment> Equipments
		{
			get
			{
				return this._Equipments;
			}
			set
			{
				this._Equipments.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Equipments(Equipment entity)
		{
			this.SendPropertyChanging();
			entity.UnitMeasure = this;
		}
		
		private void detach_Equipments(Equipment entity)
		{
			this.SendPropertyChanging();
			entity.UnitMeasure = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Method")]
	public partial class Method : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MethodID;
		
		private string _Name;
		
		private EntitySet<Permission> _Permissions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMethodIDChanging(int value);
    partial void OnMethodIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Method()
		{
			this._Permissions = new EntitySet<Permission>(new Action<Permission>(this.attach_Permissions), new Action<Permission>(this.detach_Permissions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MethodID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MethodID
		{
			get
			{
				return this._MethodID;
			}
			set
			{
				if ((this._MethodID != value))
				{
					this.OnMethodIDChanging(value);
					this.SendPropertyChanging();
					this._MethodID = value;
					this.SendPropertyChanged("MethodID");
					this.OnMethodIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Method_Permission", Storage="_Permissions", ThisKey="MethodID", OtherKey="MethodID")]
		public EntitySet<Permission> Permissions
		{
			get
			{
				return this._Permissions;
			}
			set
			{
				this._Permissions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Permissions(Permission entity)
		{
			this.SendPropertyChanging();
			entity.Method = this;
		}
		
		private void detach_Permissions(Permission entity)
		{
			this.SendPropertyChanging();
			entity.Method = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EquipmentType")]
	public partial class EquipmentType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EquipmentTypeID;
		
		private string _Name;
		
		private string _Note;
		
		private EntitySet<Equipment> _Equipments;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEquipmentTypeIDChanging(int value);
    partial void OnEquipmentTypeIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    #endregion
		
		public EquipmentType()
		{
			this._Equipments = new EntitySet<Equipment>(new Action<Equipment>(this.attach_Equipments), new Action<Equipment>(this.detach_Equipments));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EquipmentTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int EquipmentTypeID
		{
			get
			{
				return this._EquipmentTypeID;
			}
			set
			{
				if ((this._EquipmentTypeID != value))
				{
					this.OnEquipmentTypeIDChanging(value);
					this.SendPropertyChanging();
					this._EquipmentTypeID = value;
					this.SendPropertyChanged("EquipmentTypeID");
					this.OnEquipmentTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Note", DbType="NVarChar(250)")]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this.OnNoteChanging(value);
					this.SendPropertyChanging();
					this._Note = value;
					this.SendPropertyChanged("Note");
					this.OnNoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EquipmentType_Equipment", Storage="_Equipments", ThisKey="EquipmentTypeID", OtherKey="EquipmentTypeID")]
		public EntitySet<Equipment> Equipments
		{
			get
			{
				return this._Equipments;
			}
			set
			{
				this._Equipments.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Equipments(Equipment entity)
		{
			this.SendPropertyChanging();
			entity.EquipmentType = this;
		}
		
		private void detach_Equipments(Equipment entity)
		{
			this.SendPropertyChanging();
			entity.EquipmentType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EquipmentImportationDetail")]
	public partial class EquipmentImportationDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _DetailID;
		
		private int _ID;
		
		private int _Index;
		
		private int _EquipmentID;
		
		private int _RestQuantity;
		
		private int _Quantity;
		
		private int _EquipmentStatusID;
		
		private string _Note;
		
		private EntityRef<EquipmentImportation> _EquipmentImportation;
		
		private EntityRef<Equipment> _Equipment;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDetailIDChanging(System.Guid value);
    partial void OnDetailIDChanged();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnIndexChanging(int value);
    partial void OnIndexChanged();
    partial void OnEquipmentIDChanging(int value);
    partial void OnEquipmentIDChanged();
    partial void OnRestQuantityChanging(int value);
    partial void OnRestQuantityChanged();
    partial void OnQuantityChanging(int value);
    partial void OnQuantityChanged();
    partial void OnEquipmentStatusIDChanging(int value);
    partial void OnEquipmentStatusIDChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    #endregion
		
		public EquipmentImportationDetail()
		{
			this._EquipmentImportation = default(EntityRef<EquipmentImportation>);
			this._Equipment = default(EntityRef<Equipment>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DetailID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid DetailID
		{
			get
			{
				return this._DetailID;
			}
			set
			{
				if ((this._DetailID != value))
				{
					this.OnDetailIDChanging(value);
					this.SendPropertyChanging();
					this._DetailID = value;
					this.SendPropertyChanged("DetailID");
					this.OnDetailIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL")]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					if (this._EquipmentImportation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Index]", Storage="_Index", DbType="Int NOT NULL")]
		public int Index
		{
			get
			{
				return this._Index;
			}
			set
			{
				if ((this._Index != value))
				{
					this.OnIndexChanging(value);
					this.SendPropertyChanging();
					this._Index = value;
					this.SendPropertyChanged("Index");
					this.OnIndexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EquipmentID", DbType="Int NOT NULL")]
		public int EquipmentID
		{
			get
			{
				return this._EquipmentID;
			}
			set
			{
				if ((this._EquipmentID != value))
				{
					if (this._Equipment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEquipmentIDChanging(value);
					this.SendPropertyChanging();
					this._EquipmentID = value;
					this.SendPropertyChanged("EquipmentID");
					this.OnEquipmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RestQuantity", DbType="Int NOT NULL")]
		public int RestQuantity
		{
			get
			{
				return this._RestQuantity;
			}
			set
			{
				if ((this._RestQuantity != value))
				{
					this.OnRestQuantityChanging(value);
					this.SendPropertyChanging();
					this._RestQuantity = value;
					this.SendPropertyChanged("RestQuantity");
					this.OnRestQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Int NOT NULL")]
		public int Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EquipmentStatusID", DbType="Int NOT NULL")]
		public int EquipmentStatusID
		{
			get
			{
				return this._EquipmentStatusID;
			}
			set
			{
				if ((this._EquipmentStatusID != value))
				{
					this.OnEquipmentStatusIDChanging(value);
					this.SendPropertyChanging();
					this._EquipmentStatusID = value;
					this.SendPropertyChanged("EquipmentStatusID");
					this.OnEquipmentStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Note", DbType="NVarChar(250)")]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this.OnNoteChanging(value);
					this.SendPropertyChanging();
					this._Note = value;
					this.SendPropertyChanged("Note");
					this.OnNoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EquipmentImportation_EquipmentImportationDetail", Storage="_EquipmentImportation", ThisKey="ID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public EquipmentImportation EquipmentImportation
		{
			get
			{
				return this._EquipmentImportation.Entity;
			}
			set
			{
				EquipmentImportation previousValue = this._EquipmentImportation.Entity;
				if (((previousValue != value) 
							|| (this._EquipmentImportation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EquipmentImportation.Entity = null;
						previousValue.EquipmentImportationDetails.Remove(this);
					}
					this._EquipmentImportation.Entity = value;
					if ((value != null))
					{
						value.EquipmentImportationDetails.Add(this);
						this._ID = value.ID;
					}
					else
					{
						this._ID = default(int);
					}
					this.SendPropertyChanged("EquipmentImportation");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Equipment_EquipmentImportationDetail", Storage="_Equipment", ThisKey="EquipmentID", OtherKey="EquipmentID", IsForeignKey=true)]
		public Equipment Equipment
		{
			get
			{
				return this._Equipment.Entity;
			}
			set
			{
				Equipment previousValue = this._Equipment.Entity;
				if (((previousValue != value) 
							|| (this._Equipment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Equipment.Entity = null;
						previousValue.EquipmentImportationDetails.Remove(this);
					}
					this._Equipment.Entity = value;
					if ((value != null))
					{
						value.EquipmentImportationDetails.Add(this);
						this._EquipmentID = value.EquipmentID;
					}
					else
					{
						this._EquipmentID = default(int);
					}
					this.SendPropertyChanged("Equipment");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EquipmentImportation")]
	public partial class EquipmentImportation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Number;
		
		private System.DateTime _Date;
		
		private int _Deliver;
		
		private int _StatusID;
		
		private EntitySet<EquipmentImportationDetail> _EquipmentImportationDetails;
		
		private EntityRef<Employee> _Employee;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNumberChanging(string value);
    partial void OnNumberChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnDeliverChanging(int value);
    partial void OnDeliverChanged();
    partial void OnStatusIDChanging(int value);
    partial void OnStatusIDChanged();
    #endregion
		
		public EquipmentImportation()
		{
			this._EquipmentImportationDetails = new EntitySet<EquipmentImportationDetail>(new Action<EquipmentImportationDetail>(this.attach_EquipmentImportationDetails), new Action<EquipmentImportationDetail>(this.detach_EquipmentImportationDetails));
			this._Employee = default(EntityRef<Employee>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Number", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string Number
		{
			get
			{
				return this._Number;
			}
			set
			{
				if ((this._Number != value))
				{
					this.OnNumberChanging(value);
					this.SendPropertyChanging();
					this._Number = value;
					this.SendPropertyChanged("Number");
					this.OnNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Deliver", DbType="Int NOT NULL")]
		public int Deliver
		{
			get
			{
				return this._Deliver;
			}
			set
			{
				if ((this._Deliver != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDeliverChanging(value);
					this.SendPropertyChanging();
					this._Deliver = value;
					this.SendPropertyChanged("Deliver");
					this.OnDeliverChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatusID", DbType="Int NOT NULL")]
		public int StatusID
		{
			get
			{
				return this._StatusID;
			}
			set
			{
				if ((this._StatusID != value))
				{
					this.OnStatusIDChanging(value);
					this.SendPropertyChanging();
					this._StatusID = value;
					this.SendPropertyChanged("StatusID");
					this.OnStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EquipmentImportation_EquipmentImportationDetail", Storage="_EquipmentImportationDetails", ThisKey="ID", OtherKey="ID")]
		public EntitySet<EquipmentImportationDetail> EquipmentImportationDetails
		{
			get
			{
				return this._EquipmentImportationDetails;
			}
			set
			{
				this._EquipmentImportationDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_EquipmentImportation", Storage="_Employee", ThisKey="Deliver", OtherKey="EmployeeID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.EquipmentImportations.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.EquipmentImportations.Add(this);
						this._Deliver = value.EmployeeID;
					}
					else
					{
						this._Deliver = default(int);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EquipmentImportationDetails(EquipmentImportationDetail entity)
		{
			this.SendPropertyChanging();
			entity.EquipmentImportation = this;
		}
		
		private void detach_EquipmentImportationDetails(EquipmentImportationDetail entity)
		{
			this.SendPropertyChanging();
			entity.EquipmentImportation = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EquipmentExportation")]
	public partial class EquipmentExportation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Number;
		
		private System.DateTime _Date;
		
		private int _Receiver;
		
		private int _StatusID;
		
		private EntitySet<EquipmentExportationDetail> _EquipmentExportationDetails;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNumberChanging(string value);
    partial void OnNumberChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnReceiverChanging(int value);
    partial void OnReceiverChanged();
    partial void OnStatusIDChanging(int value);
    partial void OnStatusIDChanged();
    #endregion
		
		public EquipmentExportation()
		{
			this._EquipmentExportationDetails = new EntitySet<EquipmentExportationDetail>(new Action<EquipmentExportationDetail>(this.attach_EquipmentExportationDetails), new Action<EquipmentExportationDetail>(this.detach_EquipmentExportationDetails));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Number", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string Number
		{
			get
			{
				return this._Number;
			}
			set
			{
				if ((this._Number != value))
				{
					this.OnNumberChanging(value);
					this.SendPropertyChanging();
					this._Number = value;
					this.SendPropertyChanged("Number");
					this.OnNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Receiver", DbType="Int NOT NULL")]
		public int Receiver
		{
			get
			{
				return this._Receiver;
			}
			set
			{
				if ((this._Receiver != value))
				{
					this.OnReceiverChanging(value);
					this.SendPropertyChanging();
					this._Receiver = value;
					this.SendPropertyChanged("Receiver");
					this.OnReceiverChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatusID", DbType="Int NOT NULL")]
		public int StatusID
		{
			get
			{
				return this._StatusID;
			}
			set
			{
				if ((this._StatusID != value))
				{
					this.OnStatusIDChanging(value);
					this.SendPropertyChanging();
					this._StatusID = value;
					this.SendPropertyChanged("StatusID");
					this.OnStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EquipmentExportation_EquipmentExportationDetail", Storage="_EquipmentExportationDetails", ThisKey="ID", OtherKey="ID")]
		public EntitySet<EquipmentExportationDetail> EquipmentExportationDetails
		{
			get
			{
				return this._EquipmentExportationDetails;
			}
			set
			{
				this._EquipmentExportationDetails.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EquipmentExportationDetails(EquipmentExportationDetail entity)
		{
			this.SendPropertyChanging();
			entity.EquipmentExportation = this;
		}
		
		private void detach_EquipmentExportationDetails(EquipmentExportationDetail entity)
		{
			this.SendPropertyChanging();
			entity.EquipmentExportation = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EquipmentExportationDetail")]
	public partial class EquipmentExportationDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _DetailID;
		
		private int _ID;
		
		private int _Index;
		
		private int _EquipmentID;
		
		private int _RestQuantity;
		
		private int _Quantity;
		
		private int _EquipmentStatusID;
		
		private string _Note;
		
		private EntityRef<EquipmentExportation> _EquipmentExportation;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDetailIDChanging(System.Guid value);
    partial void OnDetailIDChanged();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnIndexChanging(int value);
    partial void OnIndexChanged();
    partial void OnEquipmentIDChanging(int value);
    partial void OnEquipmentIDChanged();
    partial void OnRestQuantityChanging(int value);
    partial void OnRestQuantityChanged();
    partial void OnQuantityChanging(int value);
    partial void OnQuantityChanged();
    partial void OnEquipmentStatusIDChanging(int value);
    partial void OnEquipmentStatusIDChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    #endregion
		
		public EquipmentExportationDetail()
		{
			this._EquipmentExportation = default(EntityRef<EquipmentExportation>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DetailID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid DetailID
		{
			get
			{
				return this._DetailID;
			}
			set
			{
				if ((this._DetailID != value))
				{
					this.OnDetailIDChanging(value);
					this.SendPropertyChanging();
					this._DetailID = value;
					this.SendPropertyChanged("DetailID");
					this.OnDetailIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL")]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					if (this._EquipmentExportation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Index]", Storage="_Index", DbType="Int NOT NULL")]
		public int Index
		{
			get
			{
				return this._Index;
			}
			set
			{
				if ((this._Index != value))
				{
					this.OnIndexChanging(value);
					this.SendPropertyChanging();
					this._Index = value;
					this.SendPropertyChanged("Index");
					this.OnIndexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EquipmentID", DbType="Int NOT NULL")]
		public int EquipmentID
		{
			get
			{
				return this._EquipmentID;
			}
			set
			{
				if ((this._EquipmentID != value))
				{
					this.OnEquipmentIDChanging(value);
					this.SendPropertyChanging();
					this._EquipmentID = value;
					this.SendPropertyChanged("EquipmentID");
					this.OnEquipmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RestQuantity", DbType="Int NOT NULL")]
		public int RestQuantity
		{
			get
			{
				return this._RestQuantity;
			}
			set
			{
				if ((this._RestQuantity != value))
				{
					this.OnRestQuantityChanging(value);
					this.SendPropertyChanging();
					this._RestQuantity = value;
					this.SendPropertyChanged("RestQuantity");
					this.OnRestQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Int NOT NULL")]
		public int Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EquipmentStatusID", DbType="Int NOT NULL")]
		public int EquipmentStatusID
		{
			get
			{
				return this._EquipmentStatusID;
			}
			set
			{
				if ((this._EquipmentStatusID != value))
				{
					this.OnEquipmentStatusIDChanging(value);
					this.SendPropertyChanging();
					this._EquipmentStatusID = value;
					this.SendPropertyChanged("EquipmentStatusID");
					this.OnEquipmentStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Note", DbType="NVarChar(250)")]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this.OnNoteChanging(value);
					this.SendPropertyChanging();
					this._Note = value;
					this.SendPropertyChanged("Note");
					this.OnNoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EquipmentExportation_EquipmentExportationDetail", Storage="_EquipmentExportation", ThisKey="ID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public EquipmentExportation EquipmentExportation
		{
			get
			{
				return this._EquipmentExportation.Entity;
			}
			set
			{
				EquipmentExportation previousValue = this._EquipmentExportation.Entity;
				if (((previousValue != value) 
							|| (this._EquipmentExportation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EquipmentExportation.Entity = null;
						previousValue.EquipmentExportationDetails.Remove(this);
					}
					this._EquipmentExportation.Entity = value;
					if ((value != null))
					{
						value.EquipmentExportationDetails.Add(this);
						this._ID = value.ID;
					}
					else
					{
						this._ID = default(int);
					}
					this.SendPropertyChanged("EquipmentExportation");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Regency")]
	public partial class Regency : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RegencyID;
		
		private string _Code;
		
		private string _Name;
		
		private string _Note;
		
		private EntitySet<Employee> _Employees;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRegencyIDChanging(int value);
    partial void OnRegencyIDChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    #endregion
		
		public Regency()
		{
			this._Employees = new EntitySet<Employee>(new Action<Employee>(this.attach_Employees), new Action<Employee>(this.detach_Employees));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegencyID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RegencyID
		{
			get
			{
				return this._RegencyID;
			}
			set
			{
				if ((this._RegencyID != value))
				{
					this.OnRegencyIDChanging(value);
					this.SendPropertyChanging();
					this._RegencyID = value;
					this.SendPropertyChanged("RegencyID");
					this.OnRegencyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Note", DbType="NVarChar(250)")]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this.OnNoteChanging(value);
					this.SendPropertyChanging();
					this._Note = value;
					this.SendPropertyChanged("Note");
					this.OnNoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Regency_Employee", Storage="_Employees", ThisKey="RegencyID", OtherKey="RegencyID")]
		public EntitySet<Employee> Employees
		{
			get
			{
				return this._Employees;
			}
			set
			{
				this._Employees.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.Regency = this;
		}
		
		private void detach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.Regency = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WareHouse")]
	public partial class WareHouse : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _WareHouseID;
		
		private string _Code;
		
		private string _Name;
		
		private string _Note;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnWareHouseIDChanging(int value);
    partial void OnWareHouseIDChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    #endregion
		
		public WareHouse()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WareHouseID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int WareHouseID
		{
			get
			{
				return this._WareHouseID;
			}
			set
			{
				if ((this._WareHouseID != value))
				{
					this.OnWareHouseIDChanging(value);
					this.SendPropertyChanging();
					this._WareHouseID = value;
					this.SendPropertyChanged("WareHouseID");
					this.OnWareHouseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Note", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this.OnNoteChanging(value);
					this.SendPropertyChanging();
					this._Note = value;
					this.SendPropertyChanged("Note");
					this.OnNoteChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EquipmentHandOverDetail")]
	public partial class EquipmentHandOverDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _DetailID;
		
		private int _ID;
		
		private int _Index;
		
		private int _EquipmentID;
		
		private int _Quantity;
		
		private int _EquipmentStatusID;
		
		private string _Note;
		
		private EntityRef<EquipmentHandOver> _EquipmentHandOver;
		
		private EntityRef<Equipment> _Equipment;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDetailIDChanging(System.Guid value);
    partial void OnDetailIDChanged();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnIndexChanging(int value);
    partial void OnIndexChanged();
    partial void OnEquipmentIDChanging(int value);
    partial void OnEquipmentIDChanged();
    partial void OnQuantityChanging(int value);
    partial void OnQuantityChanged();
    partial void OnEquipmentStatusIDChanging(int value);
    partial void OnEquipmentStatusIDChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    #endregion
		
		public EquipmentHandOverDetail()
		{
			this._EquipmentHandOver = default(EntityRef<EquipmentHandOver>);
			this._Equipment = default(EntityRef<Equipment>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DetailID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid DetailID
		{
			get
			{
				return this._DetailID;
			}
			set
			{
				if ((this._DetailID != value))
				{
					this.OnDetailIDChanging(value);
					this.SendPropertyChanging();
					this._DetailID = value;
					this.SendPropertyChanged("DetailID");
					this.OnDetailIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL")]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					if (this._EquipmentHandOver.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Index]", Storage="_Index", DbType="Int NOT NULL")]
		public int Index
		{
			get
			{
				return this._Index;
			}
			set
			{
				if ((this._Index != value))
				{
					this.OnIndexChanging(value);
					this.SendPropertyChanging();
					this._Index = value;
					this.SendPropertyChanged("Index");
					this.OnIndexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EquipmentID", DbType="Int NOT NULL")]
		public int EquipmentID
		{
			get
			{
				return this._EquipmentID;
			}
			set
			{
				if ((this._EquipmentID != value))
				{
					if (this._Equipment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEquipmentIDChanging(value);
					this.SendPropertyChanging();
					this._EquipmentID = value;
					this.SendPropertyChanged("EquipmentID");
					this.OnEquipmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Int NOT NULL")]
		public int Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EquipmentStatusID", DbType="Int NOT NULL")]
		public int EquipmentStatusID
		{
			get
			{
				return this._EquipmentStatusID;
			}
			set
			{
				if ((this._EquipmentStatusID != value))
				{
					this.OnEquipmentStatusIDChanging(value);
					this.SendPropertyChanging();
					this._EquipmentStatusID = value;
					this.SendPropertyChanged("EquipmentStatusID");
					this.OnEquipmentStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Note", DbType="NVarChar(250)")]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this.OnNoteChanging(value);
					this.SendPropertyChanging();
					this._Note = value;
					this.SendPropertyChanged("Note");
					this.OnNoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EquipmentHandOver_EquipmentHandOverDetail", Storage="_EquipmentHandOver", ThisKey="ID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public EquipmentHandOver EquipmentHandOver
		{
			get
			{
				return this._EquipmentHandOver.Entity;
			}
			set
			{
				EquipmentHandOver previousValue = this._EquipmentHandOver.Entity;
				if (((previousValue != value) 
							|| (this._EquipmentHandOver.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EquipmentHandOver.Entity = null;
						previousValue.EquipmentHandOverDetails.Remove(this);
					}
					this._EquipmentHandOver.Entity = value;
					if ((value != null))
					{
						value.EquipmentHandOverDetails.Add(this);
						this._ID = value.ID;
					}
					else
					{
						this._ID = default(int);
					}
					this.SendPropertyChanged("EquipmentHandOver");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Equipment_EquipmentHandOverDetail", Storage="_Equipment", ThisKey="EquipmentID", OtherKey="EquipmentID", IsForeignKey=true)]
		public Equipment Equipment
		{
			get
			{
				return this._Equipment.Entity;
			}
			set
			{
				Equipment previousValue = this._Equipment.Entity;
				if (((previousValue != value) 
							|| (this._Equipment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Equipment.Entity = null;
						previousValue.EquipmentHandOverDetails.Remove(this);
					}
					this._Equipment.Entity = value;
					if ((value != null))
					{
						value.EquipmentHandOverDetails.Add(this);
						this._EquipmentID = value.EquipmentID;
					}
					else
					{
						this._EquipmentID = default(int);
					}
					this.SendPropertyChanged("Equipment");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EquipmentHandOverReceiver")]
	public partial class EquipmentHandOverReceiver : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _DetailID;
		
		private int _ID;
		
		private int _Index;
		
		private int _EmployeeID;
		
		private EntityRef<EquipmentHandOver> _EquipmentHandOver;
		
		private EntityRef<Employee> _Employee;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDetailIDChanging(System.Guid value);
    partial void OnDetailIDChanged();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnIndexChanging(int value);
    partial void OnIndexChanged();
    partial void OnEmployeeIDChanging(int value);
    partial void OnEmployeeIDChanged();
    #endregion
		
		public EquipmentHandOverReceiver()
		{
			this._EquipmentHandOver = default(EntityRef<EquipmentHandOver>);
			this._Employee = default(EntityRef<Employee>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DetailID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid DetailID
		{
			get
			{
				return this._DetailID;
			}
			set
			{
				if ((this._DetailID != value))
				{
					this.OnDetailIDChanging(value);
					this.SendPropertyChanging();
					this._DetailID = value;
					this.SendPropertyChanged("DetailID");
					this.OnDetailIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL")]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					if (this._EquipmentHandOver.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Index]", Storage="_Index", DbType="Int NOT NULL")]
		public int Index
		{
			get
			{
				return this._Index;
			}
			set
			{
				if ((this._Index != value))
				{
					this.OnIndexChanging(value);
					this.SendPropertyChanging();
					this._Index = value;
					this.SendPropertyChanged("Index");
					this.OnIndexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeID", DbType="Int NOT NULL")]
		public int EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeID = value;
					this.SendPropertyChanged("EmployeeID");
					this.OnEmployeeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EquipmentHandOver_EquipmentHandOverReceiver", Storage="_EquipmentHandOver", ThisKey="ID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public EquipmentHandOver EquipmentHandOver
		{
			get
			{
				return this._EquipmentHandOver.Entity;
			}
			set
			{
				EquipmentHandOver previousValue = this._EquipmentHandOver.Entity;
				if (((previousValue != value) 
							|| (this._EquipmentHandOver.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EquipmentHandOver.Entity = null;
						previousValue.EquipmentHandOverReceivers.Remove(this);
					}
					this._EquipmentHandOver.Entity = value;
					if ((value != null))
					{
						value.EquipmentHandOverReceivers.Add(this);
						this._ID = value.ID;
					}
					else
					{
						this._ID = default(int);
					}
					this.SendPropertyChanged("EquipmentHandOver");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_EquipmentHandOverReceiver", Storage="_Employee", ThisKey="EmployeeID", OtherKey="EmployeeID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.EquipmentHandOverReceivers.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.EquipmentHandOverReceivers.Add(this);
						this._EmployeeID = value.EmployeeID;
					}
					else
					{
						this._EmployeeID = default(int);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EquipmentHandOverSender")]
	public partial class EquipmentHandOverSender : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _DetailID;
		
		private int _ID;
		
		private int _Index;
		
		private int _EmployeeID;
		
		private EntityRef<EquipmentHandOver> _EquipmentHandOver;
		
		private EntityRef<Employee> _Employee;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDetailIDChanging(System.Guid value);
    partial void OnDetailIDChanged();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnIndexChanging(int value);
    partial void OnIndexChanged();
    partial void OnEmployeeIDChanging(int value);
    partial void OnEmployeeIDChanged();
    #endregion
		
		public EquipmentHandOverSender()
		{
			this._EquipmentHandOver = default(EntityRef<EquipmentHandOver>);
			this._Employee = default(EntityRef<Employee>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DetailID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid DetailID
		{
			get
			{
				return this._DetailID;
			}
			set
			{
				if ((this._DetailID != value))
				{
					this.OnDetailIDChanging(value);
					this.SendPropertyChanging();
					this._DetailID = value;
					this.SendPropertyChanged("DetailID");
					this.OnDetailIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL")]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					if (this._EquipmentHandOver.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Index]", Storage="_Index", DbType="Int NOT NULL")]
		public int Index
		{
			get
			{
				return this._Index;
			}
			set
			{
				if ((this._Index != value))
				{
					this.OnIndexChanging(value);
					this.SendPropertyChanging();
					this._Index = value;
					this.SendPropertyChanged("Index");
					this.OnIndexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeID", DbType="Int NOT NULL")]
		public int EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeID = value;
					this.SendPropertyChanged("EmployeeID");
					this.OnEmployeeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EquipmentHandOver_EquipmentHandOverSender", Storage="_EquipmentHandOver", ThisKey="ID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public EquipmentHandOver EquipmentHandOver
		{
			get
			{
				return this._EquipmentHandOver.Entity;
			}
			set
			{
				EquipmentHandOver previousValue = this._EquipmentHandOver.Entity;
				if (((previousValue != value) 
							|| (this._EquipmentHandOver.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EquipmentHandOver.Entity = null;
						previousValue.EquipmentHandOverSenders.Remove(this);
					}
					this._EquipmentHandOver.Entity = value;
					if ((value != null))
					{
						value.EquipmentHandOverSenders.Add(this);
						this._ID = value.ID;
					}
					else
					{
						this._ID = default(int);
					}
					this.SendPropertyChanged("EquipmentHandOver");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_EquipmentHandOverSender", Storage="_Employee", ThisKey="EmployeeID", OtherKey="EmployeeID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.EquipmentHandOverSenders.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.EquipmentHandOverSenders.Add(this);
						this._EmployeeID = value.EmployeeID;
					}
					else
					{
						this._EmployeeID = default(int);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EquipmentHandOver")]
	public partial class EquipmentHandOver : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Number;
		
		private System.DateTime _Date;
		
		private string _Note;
		
		private int _DepartmentID;
		
		private EntitySet<EquipmentHandOverDetail> _EquipmentHandOverDetails;
		
		private EntitySet<EquipmentHandOverReceiver> _EquipmentHandOverReceivers;
		
		private EntitySet<EquipmentHandOverSender> _EquipmentHandOverSenders;
		
		private EntityRef<Department> _Department;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNumberChanging(string value);
    partial void OnNumberChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    partial void OnDepartmentIDChanging(int value);
    partial void OnDepartmentIDChanged();
    #endregion
		
		public EquipmentHandOver()
		{
			this._EquipmentHandOverDetails = new EntitySet<EquipmentHandOverDetail>(new Action<EquipmentHandOverDetail>(this.attach_EquipmentHandOverDetails), new Action<EquipmentHandOverDetail>(this.detach_EquipmentHandOverDetails));
			this._EquipmentHandOverReceivers = new EntitySet<EquipmentHandOverReceiver>(new Action<EquipmentHandOverReceiver>(this.attach_EquipmentHandOverReceivers), new Action<EquipmentHandOverReceiver>(this.detach_EquipmentHandOverReceivers));
			this._EquipmentHandOverSenders = new EntitySet<EquipmentHandOverSender>(new Action<EquipmentHandOverSender>(this.attach_EquipmentHandOverSenders), new Action<EquipmentHandOverSender>(this.detach_EquipmentHandOverSenders));
			this._Department = default(EntityRef<Department>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Number", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string Number
		{
			get
			{
				return this._Number;
			}
			set
			{
				if ((this._Number != value))
				{
					this.OnNumberChanging(value);
					this.SendPropertyChanging();
					this._Number = value;
					this.SendPropertyChanged("Number");
					this.OnNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Note", DbType="NVarChar(250)")]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this.OnNoteChanging(value);
					this.SendPropertyChanging();
					this._Note = value;
					this.SendPropertyChanged("Note");
					this.OnNoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepartmentID", DbType="Int NOT NULL")]
		public int DepartmentID
		{
			get
			{
				return this._DepartmentID;
			}
			set
			{
				if ((this._DepartmentID != value))
				{
					if (this._Department.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDepartmentIDChanging(value);
					this.SendPropertyChanging();
					this._DepartmentID = value;
					this.SendPropertyChanged("DepartmentID");
					this.OnDepartmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EquipmentHandOver_EquipmentHandOverDetail", Storage="_EquipmentHandOverDetails", ThisKey="ID", OtherKey="ID")]
		public EntitySet<EquipmentHandOverDetail> EquipmentHandOverDetails
		{
			get
			{
				return this._EquipmentHandOverDetails;
			}
			set
			{
				this._EquipmentHandOverDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EquipmentHandOver_EquipmentHandOverReceiver", Storage="_EquipmentHandOverReceivers", ThisKey="ID", OtherKey="ID")]
		public EntitySet<EquipmentHandOverReceiver> EquipmentHandOverReceivers
		{
			get
			{
				return this._EquipmentHandOverReceivers;
			}
			set
			{
				this._EquipmentHandOverReceivers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EquipmentHandOver_EquipmentHandOverSender", Storage="_EquipmentHandOverSenders", ThisKey="ID", OtherKey="ID")]
		public EntitySet<EquipmentHandOverSender> EquipmentHandOverSenders
		{
			get
			{
				return this._EquipmentHandOverSenders;
			}
			set
			{
				this._EquipmentHandOverSenders.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_EquipmentHandOver", Storage="_Department", ThisKey="DepartmentID", OtherKey="DepartmentID", IsForeignKey=true)]
		public Department Department
		{
			get
			{
				return this._Department.Entity;
			}
			set
			{
				Department previousValue = this._Department.Entity;
				if (((previousValue != value) 
							|| (this._Department.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Department.Entity = null;
						previousValue.EquipmentHandOvers.Remove(this);
					}
					this._Department.Entity = value;
					if ((value != null))
					{
						value.EquipmentHandOvers.Add(this);
						this._DepartmentID = value.DepartmentID;
					}
					else
					{
						this._DepartmentID = default(int);
					}
					this.SendPropertyChanged("Department");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EquipmentHandOverDetails(EquipmentHandOverDetail entity)
		{
			this.SendPropertyChanging();
			entity.EquipmentHandOver = this;
		}
		
		private void detach_EquipmentHandOverDetails(EquipmentHandOverDetail entity)
		{
			this.SendPropertyChanging();
			entity.EquipmentHandOver = null;
		}
		
		private void attach_EquipmentHandOverReceivers(EquipmentHandOverReceiver entity)
		{
			this.SendPropertyChanging();
			entity.EquipmentHandOver = this;
		}
		
		private void detach_EquipmentHandOverReceivers(EquipmentHandOverReceiver entity)
		{
			this.SendPropertyChanging();
			entity.EquipmentHandOver = null;
		}
		
		private void attach_EquipmentHandOverSenders(EquipmentHandOverSender entity)
		{
			this.SendPropertyChanging();
			entity.EquipmentHandOver = this;
		}
		
		private void detach_EquipmentHandOverSenders(EquipmentHandOverSender entity)
		{
			this.SendPropertyChanging();
			entity.EquipmentHandOver = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EquipmentStatusNoteBook")]
	public partial class EquipmentStatusNoteBook : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _NoteID;
		
		private System.DateTime _Date;
		
		private int _CompanyID;
		
		private int _EmployeeID;
		
		private EntitySet<EquipmentStatusNoteBookDetail> _EquipmentStatusNoteBookDetails;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNoteIDChanging(int value);
    partial void OnNoteIDChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnCompanyIDChanging(int value);
    partial void OnCompanyIDChanged();
    partial void OnEmployeeIDChanging(int value);
    partial void OnEmployeeIDChanged();
    #endregion
		
		public EquipmentStatusNoteBook()
		{
			this._EquipmentStatusNoteBookDetails = new EntitySet<EquipmentStatusNoteBookDetail>(new Action<EquipmentStatusNoteBookDetail>(this.attach_EquipmentStatusNoteBookDetails), new Action<EquipmentStatusNoteBookDetail>(this.detach_EquipmentStatusNoteBookDetails));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NoteID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int NoteID
		{
			get
			{
				return this._NoteID;
			}
			set
			{
				if ((this._NoteID != value))
				{
					this.OnNoteIDChanging(value);
					this.SendPropertyChanging();
					this._NoteID = value;
					this.SendPropertyChanged("NoteID");
					this.OnNoteIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyID", DbType="Int NOT NULL")]
		public int CompanyID
		{
			get
			{
				return this._CompanyID;
			}
			set
			{
				if ((this._CompanyID != value))
				{
					this.OnCompanyIDChanging(value);
					this.SendPropertyChanging();
					this._CompanyID = value;
					this.SendPropertyChanged("CompanyID");
					this.OnCompanyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeID", DbType="Int NOT NULL")]
		public int EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					this.OnEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeID = value;
					this.SendPropertyChanged("EmployeeID");
					this.OnEmployeeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EquipmentStatusNoteBook_EquipmentStatusNoteBookDetail", Storage="_EquipmentStatusNoteBookDetails", ThisKey="NoteID", OtherKey="ID")]
		public EntitySet<EquipmentStatusNoteBookDetail> EquipmentStatusNoteBookDetails
		{
			get
			{
				return this._EquipmentStatusNoteBookDetails;
			}
			set
			{
				this._EquipmentStatusNoteBookDetails.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EquipmentStatusNoteBookDetails(EquipmentStatusNoteBookDetail entity)
		{
			this.SendPropertyChanging();
			entity.EquipmentStatusNoteBook = this;
		}
		
		private void detach_EquipmentStatusNoteBookDetails(EquipmentStatusNoteBookDetail entity)
		{
			this.SendPropertyChanging();
			entity.EquipmentStatusNoteBook = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EquipmentStatusNoteBookDetail")]
	public partial class EquipmentStatusNoteBookDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _DetailID;
		
		private int _ID;
		
		private int _Index;
		
		private int _EquipmentID;
		
		private int _EquipmentStatusID;
		
		private string _Cause;
		
		private string _Note;
		
		private EntityRef<EquipmentStatusNoteBook> _EquipmentStatusNoteBook;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDetailIDChanging(System.Guid value);
    partial void OnDetailIDChanged();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnIndexChanging(int value);
    partial void OnIndexChanged();
    partial void OnEquipmentIDChanging(int value);
    partial void OnEquipmentIDChanged();
    partial void OnEquipmentStatusIDChanging(int value);
    partial void OnEquipmentStatusIDChanged();
    partial void OnCauseChanging(string value);
    partial void OnCauseChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    #endregion
		
		public EquipmentStatusNoteBookDetail()
		{
			this._EquipmentStatusNoteBook = default(EntityRef<EquipmentStatusNoteBook>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DetailID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid DetailID
		{
			get
			{
				return this._DetailID;
			}
			set
			{
				if ((this._DetailID != value))
				{
					this.OnDetailIDChanging(value);
					this.SendPropertyChanging();
					this._DetailID = value;
					this.SendPropertyChanged("DetailID");
					this.OnDetailIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL")]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					if (this._EquipmentStatusNoteBook.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Index]", Storage="_Index", DbType="Int NOT NULL")]
		public int Index
		{
			get
			{
				return this._Index;
			}
			set
			{
				if ((this._Index != value))
				{
					this.OnIndexChanging(value);
					this.SendPropertyChanging();
					this._Index = value;
					this.SendPropertyChanged("Index");
					this.OnIndexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EquipmentID", DbType="Int NOT NULL")]
		public int EquipmentID
		{
			get
			{
				return this._EquipmentID;
			}
			set
			{
				if ((this._EquipmentID != value))
				{
					this.OnEquipmentIDChanging(value);
					this.SendPropertyChanging();
					this._EquipmentID = value;
					this.SendPropertyChanged("EquipmentID");
					this.OnEquipmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EquipmentStatusID", DbType="Int NOT NULL")]
		public int EquipmentStatusID
		{
			get
			{
				return this._EquipmentStatusID;
			}
			set
			{
				if ((this._EquipmentStatusID != value))
				{
					this.OnEquipmentStatusIDChanging(value);
					this.SendPropertyChanging();
					this._EquipmentStatusID = value;
					this.SendPropertyChanged("EquipmentStatusID");
					this.OnEquipmentStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cause", DbType="NVarChar(150)")]
		public string Cause
		{
			get
			{
				return this._Cause;
			}
			set
			{
				if ((this._Cause != value))
				{
					this.OnCauseChanging(value);
					this.SendPropertyChanging();
					this._Cause = value;
					this.SendPropertyChanged("Cause");
					this.OnCauseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Note", DbType="NVarChar(150)")]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this.OnNoteChanging(value);
					this.SendPropertyChanging();
					this._Note = value;
					this.SendPropertyChanged("Note");
					this.OnNoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EquipmentStatusNoteBook_EquipmentStatusNoteBookDetail", Storage="_EquipmentStatusNoteBook", ThisKey="ID", OtherKey="NoteID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public EquipmentStatusNoteBook EquipmentStatusNoteBook
		{
			get
			{
				return this._EquipmentStatusNoteBook.Entity;
			}
			set
			{
				EquipmentStatusNoteBook previousValue = this._EquipmentStatusNoteBook.Entity;
				if (((previousValue != value) 
							|| (this._EquipmentStatusNoteBook.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EquipmentStatusNoteBook.Entity = null;
						previousValue.EquipmentStatusNoteBookDetails.Remove(this);
					}
					this._EquipmentStatusNoteBook.Entity = value;
					if ((value != null))
					{
						value.EquipmentStatusNoteBookDetails.Add(this);
						this._ID = value.NoteID;
					}
					else
					{
						this._ID = default(int);
					}
					this.SendPropertyChanged("EquipmentStatusNoteBook");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EquipmentReturning")]
	public partial class EquipmentReturning : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Number;
		
		private System.DateTime _Date;
		
		private int _DepartmentID;
		
		private EntitySet<EquipmentReturningReceiver> _EquipmentReturningReceivers;
		
		private EntitySet<EquipmentReturningSender> _EquipmentReturningSenders;
		
		private EntitySet<EquipmentReturningDetail> _EquipmentReturningDetails;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNumberChanging(string value);
    partial void OnNumberChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnDepartmentIDChanging(int value);
    partial void OnDepartmentIDChanged();
    #endregion
		
		public EquipmentReturning()
		{
			this._EquipmentReturningReceivers = new EntitySet<EquipmentReturningReceiver>(new Action<EquipmentReturningReceiver>(this.attach_EquipmentReturningReceivers), new Action<EquipmentReturningReceiver>(this.detach_EquipmentReturningReceivers));
			this._EquipmentReturningSenders = new EntitySet<EquipmentReturningSender>(new Action<EquipmentReturningSender>(this.attach_EquipmentReturningSenders), new Action<EquipmentReturningSender>(this.detach_EquipmentReturningSenders));
			this._EquipmentReturningDetails = new EntitySet<EquipmentReturningDetail>(new Action<EquipmentReturningDetail>(this.attach_EquipmentReturningDetails), new Action<EquipmentReturningDetail>(this.detach_EquipmentReturningDetails));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Number", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string Number
		{
			get
			{
				return this._Number;
			}
			set
			{
				if ((this._Number != value))
				{
					this.OnNumberChanging(value);
					this.SendPropertyChanging();
					this._Number = value;
					this.SendPropertyChanged("Number");
					this.OnNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepartmentID", DbType="Int NOT NULL")]
		public int DepartmentID
		{
			get
			{
				return this._DepartmentID;
			}
			set
			{
				if ((this._DepartmentID != value))
				{
					this.OnDepartmentIDChanging(value);
					this.SendPropertyChanging();
					this._DepartmentID = value;
					this.SendPropertyChanged("DepartmentID");
					this.OnDepartmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EquipmentReturning_EquipmentReturningReceiver", Storage="_EquipmentReturningReceivers", ThisKey="ID", OtherKey="ID")]
		public EntitySet<EquipmentReturningReceiver> EquipmentReturningReceivers
		{
			get
			{
				return this._EquipmentReturningReceivers;
			}
			set
			{
				this._EquipmentReturningReceivers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EquipmentReturning_EquipmentReturningSender", Storage="_EquipmentReturningSenders", ThisKey="ID", OtherKey="ID")]
		public EntitySet<EquipmentReturningSender> EquipmentReturningSenders
		{
			get
			{
				return this._EquipmentReturningSenders;
			}
			set
			{
				this._EquipmentReturningSenders.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EquipmentReturning_EquipmentReturningDetail", Storage="_EquipmentReturningDetails", ThisKey="ID", OtherKey="ID")]
		public EntitySet<EquipmentReturningDetail> EquipmentReturningDetails
		{
			get
			{
				return this._EquipmentReturningDetails;
			}
			set
			{
				this._EquipmentReturningDetails.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EquipmentReturningReceivers(EquipmentReturningReceiver entity)
		{
			this.SendPropertyChanging();
			entity.EquipmentReturning = this;
		}
		
		private void detach_EquipmentReturningReceivers(EquipmentReturningReceiver entity)
		{
			this.SendPropertyChanging();
			entity.EquipmentReturning = null;
		}
		
		private void attach_EquipmentReturningSenders(EquipmentReturningSender entity)
		{
			this.SendPropertyChanging();
			entity.EquipmentReturning = this;
		}
		
		private void detach_EquipmentReturningSenders(EquipmentReturningSender entity)
		{
			this.SendPropertyChanging();
			entity.EquipmentReturning = null;
		}
		
		private void attach_EquipmentReturningDetails(EquipmentReturningDetail entity)
		{
			this.SendPropertyChanging();
			entity.EquipmentReturning = this;
		}
		
		private void detach_EquipmentReturningDetails(EquipmentReturningDetail entity)
		{
			this.SendPropertyChanging();
			entity.EquipmentReturning = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EquipmentReturningReceiver")]
	public partial class EquipmentReturningReceiver : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _DetailID;
		
		private int _ID;
		
		private int _Index;
		
		private int _EmployeeID;
		
		private EntityRef<EquipmentReturning> _EquipmentReturning;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDetailIDChanging(System.Guid value);
    partial void OnDetailIDChanged();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnIndexChanging(int value);
    partial void OnIndexChanged();
    partial void OnEmployeeIDChanging(int value);
    partial void OnEmployeeIDChanged();
    #endregion
		
		public EquipmentReturningReceiver()
		{
			this._EquipmentReturning = default(EntityRef<EquipmentReturning>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DetailID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid DetailID
		{
			get
			{
				return this._DetailID;
			}
			set
			{
				if ((this._DetailID != value))
				{
					this.OnDetailIDChanging(value);
					this.SendPropertyChanging();
					this._DetailID = value;
					this.SendPropertyChanged("DetailID");
					this.OnDetailIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL")]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					if (this._EquipmentReturning.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Index]", Storage="_Index", DbType="Int NOT NULL")]
		public int Index
		{
			get
			{
				return this._Index;
			}
			set
			{
				if ((this._Index != value))
				{
					this.OnIndexChanging(value);
					this.SendPropertyChanging();
					this._Index = value;
					this.SendPropertyChanged("Index");
					this.OnIndexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeID", DbType="Int NOT NULL")]
		public int EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					this.OnEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeID = value;
					this.SendPropertyChanged("EmployeeID");
					this.OnEmployeeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EquipmentReturning_EquipmentReturningReceiver", Storage="_EquipmentReturning", ThisKey="ID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public EquipmentReturning EquipmentReturning
		{
			get
			{
				return this._EquipmentReturning.Entity;
			}
			set
			{
				EquipmentReturning previousValue = this._EquipmentReturning.Entity;
				if (((previousValue != value) 
							|| (this._EquipmentReturning.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EquipmentReturning.Entity = null;
						previousValue.EquipmentReturningReceivers.Remove(this);
					}
					this._EquipmentReturning.Entity = value;
					if ((value != null))
					{
						value.EquipmentReturningReceivers.Add(this);
						this._ID = value.ID;
					}
					else
					{
						this._ID = default(int);
					}
					this.SendPropertyChanged("EquipmentReturning");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EquipmentReturningSender")]
	public partial class EquipmentReturningSender : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _DetailID;
		
		private int _ID;
		
		private int _Index;
		
		private int _EmployeeID;
		
		private EntityRef<EquipmentReturning> _EquipmentReturning;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDetailIDChanging(System.Guid value);
    partial void OnDetailIDChanged();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnIndexChanging(int value);
    partial void OnIndexChanged();
    partial void OnEmployeeIDChanging(int value);
    partial void OnEmployeeIDChanged();
    #endregion
		
		public EquipmentReturningSender()
		{
			this._EquipmentReturning = default(EntityRef<EquipmentReturning>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DetailID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid DetailID
		{
			get
			{
				return this._DetailID;
			}
			set
			{
				if ((this._DetailID != value))
				{
					this.OnDetailIDChanging(value);
					this.SendPropertyChanging();
					this._DetailID = value;
					this.SendPropertyChanged("DetailID");
					this.OnDetailIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL")]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					if (this._EquipmentReturning.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Index]", Storage="_Index", DbType="Int NOT NULL")]
		public int Index
		{
			get
			{
				return this._Index;
			}
			set
			{
				if ((this._Index != value))
				{
					this.OnIndexChanging(value);
					this.SendPropertyChanging();
					this._Index = value;
					this.SendPropertyChanged("Index");
					this.OnIndexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeID", DbType="Int NOT NULL")]
		public int EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					this.OnEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeID = value;
					this.SendPropertyChanged("EmployeeID");
					this.OnEmployeeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EquipmentReturning_EquipmentReturningSender", Storage="_EquipmentReturning", ThisKey="ID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public EquipmentReturning EquipmentReturning
		{
			get
			{
				return this._EquipmentReturning.Entity;
			}
			set
			{
				EquipmentReturning previousValue = this._EquipmentReturning.Entity;
				if (((previousValue != value) 
							|| (this._EquipmentReturning.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EquipmentReturning.Entity = null;
						previousValue.EquipmentReturningSenders.Remove(this);
					}
					this._EquipmentReturning.Entity = value;
					if ((value != null))
					{
						value.EquipmentReturningSenders.Add(this);
						this._ID = value.ID;
					}
					else
					{
						this._ID = default(int);
					}
					this.SendPropertyChanged("EquipmentReturning");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EquipmentReturningDetail")]
	public partial class EquipmentReturningDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _DetailID;
		
		private int _ID;
		
		private int _Index;
		
		private int _EquipmentID;
		
		private int _Quantity;
		
		private int _EquipmentStatusID;
		
		private EntityRef<EquipmentReturning> _EquipmentReturning;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDetailIDChanging(System.Guid value);
    partial void OnDetailIDChanged();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnIndexChanging(int value);
    partial void OnIndexChanged();
    partial void OnEquipmentIDChanging(int value);
    partial void OnEquipmentIDChanged();
    partial void OnQuantityChanging(int value);
    partial void OnQuantityChanged();
    partial void OnEquipmentStatusIDChanging(int value);
    partial void OnEquipmentStatusIDChanged();
    #endregion
		
		public EquipmentReturningDetail()
		{
			this._EquipmentReturning = default(EntityRef<EquipmentReturning>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DetailID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid DetailID
		{
			get
			{
				return this._DetailID;
			}
			set
			{
				if ((this._DetailID != value))
				{
					this.OnDetailIDChanging(value);
					this.SendPropertyChanging();
					this._DetailID = value;
					this.SendPropertyChanged("DetailID");
					this.OnDetailIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL")]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					if (this._EquipmentReturning.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Index]", Storage="_Index", DbType="Int NOT NULL")]
		public int Index
		{
			get
			{
				return this._Index;
			}
			set
			{
				if ((this._Index != value))
				{
					this.OnIndexChanging(value);
					this.SendPropertyChanging();
					this._Index = value;
					this.SendPropertyChanged("Index");
					this.OnIndexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EquipmentID", DbType="Int NOT NULL")]
		public int EquipmentID
		{
			get
			{
				return this._EquipmentID;
			}
			set
			{
				if ((this._EquipmentID != value))
				{
					this.OnEquipmentIDChanging(value);
					this.SendPropertyChanging();
					this._EquipmentID = value;
					this.SendPropertyChanged("EquipmentID");
					this.OnEquipmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Int NOT NULL")]
		public int Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EquipmentStatusID", DbType="Int NOT NULL")]
		public int EquipmentStatusID
		{
			get
			{
				return this._EquipmentStatusID;
			}
			set
			{
				if ((this._EquipmentStatusID != value))
				{
					this.OnEquipmentStatusIDChanging(value);
					this.SendPropertyChanging();
					this._EquipmentStatusID = value;
					this.SendPropertyChanged("EquipmentStatusID");
					this.OnEquipmentStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EquipmentReturning_EquipmentReturningDetail", Storage="_EquipmentReturning", ThisKey="ID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public EquipmentReturning EquipmentReturning
		{
			get
			{
				return this._EquipmentReturning.Entity;
			}
			set
			{
				EquipmentReturning previousValue = this._EquipmentReturning.Entity;
				if (((previousValue != value) 
							|| (this._EquipmentReturning.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EquipmentReturning.Entity = null;
						previousValue.EquipmentReturningDetails.Remove(this);
					}
					this._EquipmentReturning.Entity = value;
					if ((value != null))
					{
						value.EquipmentReturningDetails.Add(this);
						this._ID = value.ID;
					}
					else
					{
						this._ID = default(int);
					}
					this.SendPropertyChanged("EquipmentReturning");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EquipmentTransfer")]
	public partial class EquipmentTransfer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Number;
		
		private System.DateTime _Date;
		
		private string _Note;
		
		private EntitySet<EquipmentTransferDetail> _EquipmentTransferDetails;
		
		private EntitySet<EquipmentTransferReceiver> _EquipmentTransferReceivers;
		
		private EntitySet<EquipmentTransferSender> _EquipmentTransferSenders;
		
		private EntitySet<EquipmentTransferITManager> _EquipmentTransferITManagers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNumberChanging(string value);
    partial void OnNumberChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    #endregion
		
		public EquipmentTransfer()
		{
			this._EquipmentTransferDetails = new EntitySet<EquipmentTransferDetail>(new Action<EquipmentTransferDetail>(this.attach_EquipmentTransferDetails), new Action<EquipmentTransferDetail>(this.detach_EquipmentTransferDetails));
			this._EquipmentTransferReceivers = new EntitySet<EquipmentTransferReceiver>(new Action<EquipmentTransferReceiver>(this.attach_EquipmentTransferReceivers), new Action<EquipmentTransferReceiver>(this.detach_EquipmentTransferReceivers));
			this._EquipmentTransferSenders = new EntitySet<EquipmentTransferSender>(new Action<EquipmentTransferSender>(this.attach_EquipmentTransferSenders), new Action<EquipmentTransferSender>(this.detach_EquipmentTransferSenders));
			this._EquipmentTransferITManagers = new EntitySet<EquipmentTransferITManager>(new Action<EquipmentTransferITManager>(this.attach_EquipmentTransferITManagers), new Action<EquipmentTransferITManager>(this.detach_EquipmentTransferITManagers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Number", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string Number
		{
			get
			{
				return this._Number;
			}
			set
			{
				if ((this._Number != value))
				{
					this.OnNumberChanging(value);
					this.SendPropertyChanging();
					this._Number = value;
					this.SendPropertyChanged("Number");
					this.OnNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Note", DbType="NVarChar(350)")]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this.OnNoteChanging(value);
					this.SendPropertyChanging();
					this._Note = value;
					this.SendPropertyChanged("Note");
					this.OnNoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EquipmentTransfer_EquipmentTransferDetail", Storage="_EquipmentTransferDetails", ThisKey="ID", OtherKey="ID")]
		public EntitySet<EquipmentTransferDetail> EquipmentTransferDetails
		{
			get
			{
				return this._EquipmentTransferDetails;
			}
			set
			{
				this._EquipmentTransferDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EquipmentTransfer_EquipmentTransferReceiver", Storage="_EquipmentTransferReceivers", ThisKey="ID", OtherKey="ID")]
		public EntitySet<EquipmentTransferReceiver> EquipmentTransferReceivers
		{
			get
			{
				return this._EquipmentTransferReceivers;
			}
			set
			{
				this._EquipmentTransferReceivers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EquipmentTransfer_EquipmentTransferSender", Storage="_EquipmentTransferSenders", ThisKey="ID", OtherKey="ID")]
		public EntitySet<EquipmentTransferSender> EquipmentTransferSenders
		{
			get
			{
				return this._EquipmentTransferSenders;
			}
			set
			{
				this._EquipmentTransferSenders.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EquipmentTransfer_EquipmentTransferITManager", Storage="_EquipmentTransferITManagers", ThisKey="ID", OtherKey="ID")]
		public EntitySet<EquipmentTransferITManager> EquipmentTransferITManagers
		{
			get
			{
				return this._EquipmentTransferITManagers;
			}
			set
			{
				this._EquipmentTransferITManagers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EquipmentTransferDetails(EquipmentTransferDetail entity)
		{
			this.SendPropertyChanging();
			entity.EquipmentTransfer = this;
		}
		
		private void detach_EquipmentTransferDetails(EquipmentTransferDetail entity)
		{
			this.SendPropertyChanging();
			entity.EquipmentTransfer = null;
		}
		
		private void attach_EquipmentTransferReceivers(EquipmentTransferReceiver entity)
		{
			this.SendPropertyChanging();
			entity.EquipmentTransfer = this;
		}
		
		private void detach_EquipmentTransferReceivers(EquipmentTransferReceiver entity)
		{
			this.SendPropertyChanging();
			entity.EquipmentTransfer = null;
		}
		
		private void attach_EquipmentTransferSenders(EquipmentTransferSender entity)
		{
			this.SendPropertyChanging();
			entity.EquipmentTransfer = this;
		}
		
		private void detach_EquipmentTransferSenders(EquipmentTransferSender entity)
		{
			this.SendPropertyChanging();
			entity.EquipmentTransfer = null;
		}
		
		private void attach_EquipmentTransferITManagers(EquipmentTransferITManager entity)
		{
			this.SendPropertyChanging();
			entity.EquipmentTransfer = this;
		}
		
		private void detach_EquipmentTransferITManagers(EquipmentTransferITManager entity)
		{
			this.SendPropertyChanging();
			entity.EquipmentTransfer = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EquipmentTransferDetail")]
	public partial class EquipmentTransferDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _DetailID;
		
		private int _ID;
		
		private int _Index;
		
		private int _EquipmentID;
		
		private int _Quantity;
		
		private int _EquipmentStatusID;
		
		private string _Note;
		
		private EntityRef<EquipmentTransfer> _EquipmentTransfer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDetailIDChanging(System.Guid value);
    partial void OnDetailIDChanged();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnIndexChanging(int value);
    partial void OnIndexChanged();
    partial void OnEquipmentIDChanging(int value);
    partial void OnEquipmentIDChanged();
    partial void OnQuantityChanging(int value);
    partial void OnQuantityChanged();
    partial void OnEquipmentStatusIDChanging(int value);
    partial void OnEquipmentStatusIDChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    #endregion
		
		public EquipmentTransferDetail()
		{
			this._EquipmentTransfer = default(EntityRef<EquipmentTransfer>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DetailID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid DetailID
		{
			get
			{
				return this._DetailID;
			}
			set
			{
				if ((this._DetailID != value))
				{
					this.OnDetailIDChanging(value);
					this.SendPropertyChanging();
					this._DetailID = value;
					this.SendPropertyChanged("DetailID");
					this.OnDetailIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL")]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					if (this._EquipmentTransfer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Index]", Storage="_Index", DbType="Int NOT NULL")]
		public int Index
		{
			get
			{
				return this._Index;
			}
			set
			{
				if ((this._Index != value))
				{
					this.OnIndexChanging(value);
					this.SendPropertyChanging();
					this._Index = value;
					this.SendPropertyChanged("Index");
					this.OnIndexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EquipmentID", DbType="Int NOT NULL")]
		public int EquipmentID
		{
			get
			{
				return this._EquipmentID;
			}
			set
			{
				if ((this._EquipmentID != value))
				{
					this.OnEquipmentIDChanging(value);
					this.SendPropertyChanging();
					this._EquipmentID = value;
					this.SendPropertyChanged("EquipmentID");
					this.OnEquipmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Int NOT NULL")]
		public int Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EquipmentStatusID", DbType="Int NOT NULL")]
		public int EquipmentStatusID
		{
			get
			{
				return this._EquipmentStatusID;
			}
			set
			{
				if ((this._EquipmentStatusID != value))
				{
					this.OnEquipmentStatusIDChanging(value);
					this.SendPropertyChanging();
					this._EquipmentStatusID = value;
					this.SendPropertyChanged("EquipmentStatusID");
					this.OnEquipmentStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Note", DbType="NVarChar(250)")]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this.OnNoteChanging(value);
					this.SendPropertyChanging();
					this._Note = value;
					this.SendPropertyChanged("Note");
					this.OnNoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EquipmentTransfer_EquipmentTransferDetail", Storage="_EquipmentTransfer", ThisKey="ID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public EquipmentTransfer EquipmentTransfer
		{
			get
			{
				return this._EquipmentTransfer.Entity;
			}
			set
			{
				EquipmentTransfer previousValue = this._EquipmentTransfer.Entity;
				if (((previousValue != value) 
							|| (this._EquipmentTransfer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EquipmentTransfer.Entity = null;
						previousValue.EquipmentTransferDetails.Remove(this);
					}
					this._EquipmentTransfer.Entity = value;
					if ((value != null))
					{
						value.EquipmentTransferDetails.Add(this);
						this._ID = value.ID;
					}
					else
					{
						this._ID = default(int);
					}
					this.SendPropertyChanged("EquipmentTransfer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EquipmentTransferReceiver")]
	public partial class EquipmentTransferReceiver : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _DetailID;
		
		private int _ID;
		
		private int _Index;
		
		private int _EmployeeID;
		
		private EntityRef<EquipmentTransfer> _EquipmentTransfer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDetailIDChanging(System.Guid value);
    partial void OnDetailIDChanged();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnIndexChanging(int value);
    partial void OnIndexChanged();
    partial void OnEmployeeIDChanging(int value);
    partial void OnEmployeeIDChanged();
    #endregion
		
		public EquipmentTransferReceiver()
		{
			this._EquipmentTransfer = default(EntityRef<EquipmentTransfer>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DetailID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid DetailID
		{
			get
			{
				return this._DetailID;
			}
			set
			{
				if ((this._DetailID != value))
				{
					this.OnDetailIDChanging(value);
					this.SendPropertyChanging();
					this._DetailID = value;
					this.SendPropertyChanged("DetailID");
					this.OnDetailIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL")]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					if (this._EquipmentTransfer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Index]", Storage="_Index", DbType="Int NOT NULL")]
		public int Index
		{
			get
			{
				return this._Index;
			}
			set
			{
				if ((this._Index != value))
				{
					this.OnIndexChanging(value);
					this.SendPropertyChanging();
					this._Index = value;
					this.SendPropertyChanged("Index");
					this.OnIndexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeID", DbType="Int NOT NULL")]
		public int EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					this.OnEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeID = value;
					this.SendPropertyChanged("EmployeeID");
					this.OnEmployeeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EquipmentTransfer_EquipmentTransferReceiver", Storage="_EquipmentTransfer", ThisKey="ID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public EquipmentTransfer EquipmentTransfer
		{
			get
			{
				return this._EquipmentTransfer.Entity;
			}
			set
			{
				EquipmentTransfer previousValue = this._EquipmentTransfer.Entity;
				if (((previousValue != value) 
							|| (this._EquipmentTransfer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EquipmentTransfer.Entity = null;
						previousValue.EquipmentTransferReceivers.Remove(this);
					}
					this._EquipmentTransfer.Entity = value;
					if ((value != null))
					{
						value.EquipmentTransferReceivers.Add(this);
						this._ID = value.ID;
					}
					else
					{
						this._ID = default(int);
					}
					this.SendPropertyChanged("EquipmentTransfer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EquipmentTransferSender")]
	public partial class EquipmentTransferSender : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _DetailID;
		
		private int _ID;
		
		private int _Index;
		
		private int _EmployeeID;
		
		private EntityRef<EquipmentTransfer> _EquipmentTransfer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDetailIDChanging(System.Guid value);
    partial void OnDetailIDChanged();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnIndexChanging(int value);
    partial void OnIndexChanged();
    partial void OnEmployeeIDChanging(int value);
    partial void OnEmployeeIDChanged();
    #endregion
		
		public EquipmentTransferSender()
		{
			this._EquipmentTransfer = default(EntityRef<EquipmentTransfer>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DetailID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid DetailID
		{
			get
			{
				return this._DetailID;
			}
			set
			{
				if ((this._DetailID != value))
				{
					this.OnDetailIDChanging(value);
					this.SendPropertyChanging();
					this._DetailID = value;
					this.SendPropertyChanged("DetailID");
					this.OnDetailIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL")]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					if (this._EquipmentTransfer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Index]", Storage="_Index", DbType="Int NOT NULL")]
		public int Index
		{
			get
			{
				return this._Index;
			}
			set
			{
				if ((this._Index != value))
				{
					this.OnIndexChanging(value);
					this.SendPropertyChanging();
					this._Index = value;
					this.SendPropertyChanged("Index");
					this.OnIndexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeID", DbType="Int NOT NULL")]
		public int EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					this.OnEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeID = value;
					this.SendPropertyChanged("EmployeeID");
					this.OnEmployeeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EquipmentTransfer_EquipmentTransferSender", Storage="_EquipmentTransfer", ThisKey="ID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public EquipmentTransfer EquipmentTransfer
		{
			get
			{
				return this._EquipmentTransfer.Entity;
			}
			set
			{
				EquipmentTransfer previousValue = this._EquipmentTransfer.Entity;
				if (((previousValue != value) 
							|| (this._EquipmentTransfer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EquipmentTransfer.Entity = null;
						previousValue.EquipmentTransferSenders.Remove(this);
					}
					this._EquipmentTransfer.Entity = value;
					if ((value != null))
					{
						value.EquipmentTransferSenders.Add(this);
						this._ID = value.ID;
					}
					else
					{
						this._ID = default(int);
					}
					this.SendPropertyChanged("EquipmentTransfer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EquipmentBreak")]
	public partial class EquipmentBreak : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _CompanyID;
		
		private System.DateTime _Date;
		
		private int _EquipmentID;
		
		private int _DepartmentID;
		
		private int _EmployeeID;
		
		private string _CurrentStatus;
		
		private string _EmployeeAdvise;
		
		private int _Assignment;
		
		private System.Nullable<int> _Repairer;
		
		private System.Nullable<System.DateTime> _RecvInfoDate;
		
		private System.Nullable<System.DateTime> _RepairDate;
		
		private string _Result;
		
		private string _Advise;
		
		private int _StatusID;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCompanyIDChanging(int value);
    partial void OnCompanyIDChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnEquipmentIDChanging(int value);
    partial void OnEquipmentIDChanged();
    partial void OnDepartmentIDChanging(int value);
    partial void OnDepartmentIDChanged();
    partial void OnEmployeeIDChanging(int value);
    partial void OnEmployeeIDChanged();
    partial void OnCurrentStatusChanging(string value);
    partial void OnCurrentStatusChanged();
    partial void OnEmployeeAdviseChanging(string value);
    partial void OnEmployeeAdviseChanged();
    partial void OnAssignmentChanging(int value);
    partial void OnAssignmentChanged();
    partial void OnRepairerChanging(System.Nullable<int> value);
    partial void OnRepairerChanged();
    partial void OnRecvInfoDateChanging(System.Nullable<System.DateTime> value);
    partial void OnRecvInfoDateChanged();
    partial void OnRepairDateChanging(System.Nullable<System.DateTime> value);
    partial void OnRepairDateChanged();
    partial void OnResultChanging(string value);
    partial void OnResultChanged();
    partial void OnAdviseChanging(string value);
    partial void OnAdviseChanged();
    partial void OnStatusIDChanging(int value);
    partial void OnStatusIDChanged();
    #endregion
		
		public EquipmentBreak()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyID", DbType="Int NOT NULL")]
		public int CompanyID
		{
			get
			{
				return this._CompanyID;
			}
			set
			{
				if ((this._CompanyID != value))
				{
					this.OnCompanyIDChanging(value);
					this.SendPropertyChanging();
					this._CompanyID = value;
					this.SendPropertyChanged("CompanyID");
					this.OnCompanyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EquipmentID", DbType="Int NOT NULL")]
		public int EquipmentID
		{
			get
			{
				return this._EquipmentID;
			}
			set
			{
				if ((this._EquipmentID != value))
				{
					this.OnEquipmentIDChanging(value);
					this.SendPropertyChanging();
					this._EquipmentID = value;
					this.SendPropertyChanged("EquipmentID");
					this.OnEquipmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepartmentID", DbType="Int NOT NULL")]
		public int DepartmentID
		{
			get
			{
				return this._DepartmentID;
			}
			set
			{
				if ((this._DepartmentID != value))
				{
					this.OnDepartmentIDChanging(value);
					this.SendPropertyChanging();
					this._DepartmentID = value;
					this.SendPropertyChanged("DepartmentID");
					this.OnDepartmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeID", DbType="Int NOT NULL")]
		public int EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					this.OnEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeID = value;
					this.SendPropertyChanged("EmployeeID");
					this.OnEmployeeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurrentStatus", DbType="NVarChar(350)")]
		public string CurrentStatus
		{
			get
			{
				return this._CurrentStatus;
			}
			set
			{
				if ((this._CurrentStatus != value))
				{
					this.OnCurrentStatusChanging(value);
					this.SendPropertyChanging();
					this._CurrentStatus = value;
					this.SendPropertyChanged("CurrentStatus");
					this.OnCurrentStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeAdvise", DbType="NVarChar(350)")]
		public string EmployeeAdvise
		{
			get
			{
				return this._EmployeeAdvise;
			}
			set
			{
				if ((this._EmployeeAdvise != value))
				{
					this.OnEmployeeAdviseChanging(value);
					this.SendPropertyChanging();
					this._EmployeeAdvise = value;
					this.SendPropertyChanged("EmployeeAdvise");
					this.OnEmployeeAdviseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Assignment", DbType="Int NOT NULL")]
		public int Assignment
		{
			get
			{
				return this._Assignment;
			}
			set
			{
				if ((this._Assignment != value))
				{
					this.OnAssignmentChanging(value);
					this.SendPropertyChanging();
					this._Assignment = value;
					this.SendPropertyChanged("Assignment");
					this.OnAssignmentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Repairer", DbType="Int")]
		public System.Nullable<int> Repairer
		{
			get
			{
				return this._Repairer;
			}
			set
			{
				if ((this._Repairer != value))
				{
					this.OnRepairerChanging(value);
					this.SendPropertyChanging();
					this._Repairer = value;
					this.SendPropertyChanged("Repairer");
					this.OnRepairerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecvInfoDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> RecvInfoDate
		{
			get
			{
				return this._RecvInfoDate;
			}
			set
			{
				if ((this._RecvInfoDate != value))
				{
					this.OnRecvInfoDateChanging(value);
					this.SendPropertyChanging();
					this._RecvInfoDate = value;
					this.SendPropertyChanged("RecvInfoDate");
					this.OnRecvInfoDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RepairDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> RepairDate
		{
			get
			{
				return this._RepairDate;
			}
			set
			{
				if ((this._RepairDate != value))
				{
					this.OnRepairDateChanging(value);
					this.SendPropertyChanging();
					this._RepairDate = value;
					this.SendPropertyChanged("RepairDate");
					this.OnRepairDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Result", DbType="NVarChar(350)")]
		public string Result
		{
			get
			{
				return this._Result;
			}
			set
			{
				if ((this._Result != value))
				{
					this.OnResultChanging(value);
					this.SendPropertyChanging();
					this._Result = value;
					this.SendPropertyChanged("Result");
					this.OnResultChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Advise", DbType="NVarChar(350)")]
		public string Advise
		{
			get
			{
				return this._Advise;
			}
			set
			{
				if ((this._Advise != value))
				{
					this.OnAdviseChanging(value);
					this.SendPropertyChanging();
					this._Advise = value;
					this.SendPropertyChanged("Advise");
					this.OnAdviseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatusID", DbType="Int NOT NULL")]
		public int StatusID
		{
			get
			{
				return this._StatusID;
			}
			set
			{
				if ((this._StatusID != value))
				{
					this.OnStatusIDChanging(value);
					this.SendPropertyChanging();
					this._StatusID = value;
					this.SendPropertyChanged("StatusID");
					this.OnStatusIDChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EquipmentBreakReport")]
	public partial class EquipmentBreakReport : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Number;
		
		private System.DateTime _Date;
		
		private int _DepartmentID;
		
		private int _EquipmentID;
		
		private string _EquipmentStatus;
		
		private string _Cause;
		
		private string _HowToRepair;
		
		private string _EmployeeAdvise;
		
		private string _ManagerAdvise;
		
		private int _StatusID;
		
		private EntitySet<EquipmentBreakReportManager> _EquipmentBreakReportManagers;
		
		private EntitySet<EquipmentBreakReportUser> _EquipmentBreakReportUsers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNumberChanging(string value);
    partial void OnNumberChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnDepartmentIDChanging(int value);
    partial void OnDepartmentIDChanged();
    partial void OnEquipmentIDChanging(int value);
    partial void OnEquipmentIDChanged();
    partial void OnEquipmentStatusChanging(string value);
    partial void OnEquipmentStatusChanged();
    partial void OnCauseChanging(string value);
    partial void OnCauseChanged();
    partial void OnHowToRepairChanging(string value);
    partial void OnHowToRepairChanged();
    partial void OnEmployeeAdviseChanging(string value);
    partial void OnEmployeeAdviseChanged();
    partial void OnManagerAdviseChanging(string value);
    partial void OnManagerAdviseChanged();
    partial void OnStatusIDChanging(int value);
    partial void OnStatusIDChanged();
    #endregion
		
		public EquipmentBreakReport()
		{
			this._EquipmentBreakReportManagers = new EntitySet<EquipmentBreakReportManager>(new Action<EquipmentBreakReportManager>(this.attach_EquipmentBreakReportManagers), new Action<EquipmentBreakReportManager>(this.detach_EquipmentBreakReportManagers));
			this._EquipmentBreakReportUsers = new EntitySet<EquipmentBreakReportUser>(new Action<EquipmentBreakReportUser>(this.attach_EquipmentBreakReportUsers), new Action<EquipmentBreakReportUser>(this.detach_EquipmentBreakReportUsers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Number", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string Number
		{
			get
			{
				return this._Number;
			}
			set
			{
				if ((this._Number != value))
				{
					this.OnNumberChanging(value);
					this.SendPropertyChanging();
					this._Number = value;
					this.SendPropertyChanged("Number");
					this.OnNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepartmentID", DbType="Int NOT NULL")]
		public int DepartmentID
		{
			get
			{
				return this._DepartmentID;
			}
			set
			{
				if ((this._DepartmentID != value))
				{
					this.OnDepartmentIDChanging(value);
					this.SendPropertyChanging();
					this._DepartmentID = value;
					this.SendPropertyChanged("DepartmentID");
					this.OnDepartmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EquipmentID", DbType="Int NOT NULL")]
		public int EquipmentID
		{
			get
			{
				return this._EquipmentID;
			}
			set
			{
				if ((this._EquipmentID != value))
				{
					this.OnEquipmentIDChanging(value);
					this.SendPropertyChanging();
					this._EquipmentID = value;
					this.SendPropertyChanged("EquipmentID");
					this.OnEquipmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EquipmentStatus", DbType="NVarChar(350)")]
		public string EquipmentStatus
		{
			get
			{
				return this._EquipmentStatus;
			}
			set
			{
				if ((this._EquipmentStatus != value))
				{
					this.OnEquipmentStatusChanging(value);
					this.SendPropertyChanging();
					this._EquipmentStatus = value;
					this.SendPropertyChanged("EquipmentStatus");
					this.OnEquipmentStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cause", DbType="NVarChar(350)")]
		public string Cause
		{
			get
			{
				return this._Cause;
			}
			set
			{
				if ((this._Cause != value))
				{
					this.OnCauseChanging(value);
					this.SendPropertyChanging();
					this._Cause = value;
					this.SendPropertyChanged("Cause");
					this.OnCauseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HowToRepair", DbType="NVarChar(350)")]
		public string HowToRepair
		{
			get
			{
				return this._HowToRepair;
			}
			set
			{
				if ((this._HowToRepair != value))
				{
					this.OnHowToRepairChanging(value);
					this.SendPropertyChanging();
					this._HowToRepair = value;
					this.SendPropertyChanged("HowToRepair");
					this.OnHowToRepairChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeAdvise", DbType="NVarChar(350)")]
		public string EmployeeAdvise
		{
			get
			{
				return this._EmployeeAdvise;
			}
			set
			{
				if ((this._EmployeeAdvise != value))
				{
					this.OnEmployeeAdviseChanging(value);
					this.SendPropertyChanging();
					this._EmployeeAdvise = value;
					this.SendPropertyChanged("EmployeeAdvise");
					this.OnEmployeeAdviseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ManagerAdvise", DbType="NVarChar(350)")]
		public string ManagerAdvise
		{
			get
			{
				return this._ManagerAdvise;
			}
			set
			{
				if ((this._ManagerAdvise != value))
				{
					this.OnManagerAdviseChanging(value);
					this.SendPropertyChanging();
					this._ManagerAdvise = value;
					this.SendPropertyChanged("ManagerAdvise");
					this.OnManagerAdviseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatusID", DbType="Int NOT NULL")]
		public int StatusID
		{
			get
			{
				return this._StatusID;
			}
			set
			{
				if ((this._StatusID != value))
				{
					this.OnStatusIDChanging(value);
					this.SendPropertyChanging();
					this._StatusID = value;
					this.SendPropertyChanged("StatusID");
					this.OnStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EquipmentBreakReport_EquipmentBreakReportManager", Storage="_EquipmentBreakReportManagers", ThisKey="ID", OtherKey="ID")]
		public EntitySet<EquipmentBreakReportManager> EquipmentBreakReportManagers
		{
			get
			{
				return this._EquipmentBreakReportManagers;
			}
			set
			{
				this._EquipmentBreakReportManagers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EquipmentBreakReport_EquipmentBreakReportUser", Storage="_EquipmentBreakReportUsers", ThisKey="ID", OtherKey="ID")]
		public EntitySet<EquipmentBreakReportUser> EquipmentBreakReportUsers
		{
			get
			{
				return this._EquipmentBreakReportUsers;
			}
			set
			{
				this._EquipmentBreakReportUsers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EquipmentBreakReportManagers(EquipmentBreakReportManager entity)
		{
			this.SendPropertyChanging();
			entity.EquipmentBreakReport = this;
		}
		
		private void detach_EquipmentBreakReportManagers(EquipmentBreakReportManager entity)
		{
			this.SendPropertyChanging();
			entity.EquipmentBreakReport = null;
		}
		
		private void attach_EquipmentBreakReportUsers(EquipmentBreakReportUser entity)
		{
			this.SendPropertyChanging();
			entity.EquipmentBreakReport = this;
		}
		
		private void detach_EquipmentBreakReportUsers(EquipmentBreakReportUser entity)
		{
			this.SendPropertyChanging();
			entity.EquipmentBreakReport = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EquipmentBreakReportManager")]
	public partial class EquipmentBreakReportManager : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _DetailID;
		
		private int _ID;
		
		private int _Index;
		
		private int _EmployeeID;
		
		private EntityRef<EquipmentBreakReport> _EquipmentBreakReport;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDetailIDChanging(System.Guid value);
    partial void OnDetailIDChanged();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnIndexChanging(int value);
    partial void OnIndexChanged();
    partial void OnEmployeeIDChanging(int value);
    partial void OnEmployeeIDChanged();
    #endregion
		
		public EquipmentBreakReportManager()
		{
			this._EquipmentBreakReport = default(EntityRef<EquipmentBreakReport>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DetailID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid DetailID
		{
			get
			{
				return this._DetailID;
			}
			set
			{
				if ((this._DetailID != value))
				{
					this.OnDetailIDChanging(value);
					this.SendPropertyChanging();
					this._DetailID = value;
					this.SendPropertyChanged("DetailID");
					this.OnDetailIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL")]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					if (this._EquipmentBreakReport.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Index]", Storage="_Index", DbType="Int NOT NULL")]
		public int Index
		{
			get
			{
				return this._Index;
			}
			set
			{
				if ((this._Index != value))
				{
					this.OnIndexChanging(value);
					this.SendPropertyChanging();
					this._Index = value;
					this.SendPropertyChanged("Index");
					this.OnIndexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeID", DbType="Int NOT NULL")]
		public int EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					this.OnEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeID = value;
					this.SendPropertyChanged("EmployeeID");
					this.OnEmployeeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EquipmentBreakReport_EquipmentBreakReportManager", Storage="_EquipmentBreakReport", ThisKey="ID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public EquipmentBreakReport EquipmentBreakReport
		{
			get
			{
				return this._EquipmentBreakReport.Entity;
			}
			set
			{
				EquipmentBreakReport previousValue = this._EquipmentBreakReport.Entity;
				if (((previousValue != value) 
							|| (this._EquipmentBreakReport.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EquipmentBreakReport.Entity = null;
						previousValue.EquipmentBreakReportManagers.Remove(this);
					}
					this._EquipmentBreakReport.Entity = value;
					if ((value != null))
					{
						value.EquipmentBreakReportManagers.Add(this);
						this._ID = value.ID;
					}
					else
					{
						this._ID = default(int);
					}
					this.SendPropertyChanged("EquipmentBreakReport");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EquipmentBreakReportUser")]
	public partial class EquipmentBreakReportUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _DetailID;
		
		private int _ID;
		
		private int _Index;
		
		private int _EmployeeID;
		
		private EntityRef<EquipmentBreakReport> _EquipmentBreakReport;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDetailIDChanging(System.Guid value);
    partial void OnDetailIDChanged();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnIndexChanging(int value);
    partial void OnIndexChanged();
    partial void OnEmployeeIDChanging(int value);
    partial void OnEmployeeIDChanged();
    #endregion
		
		public EquipmentBreakReportUser()
		{
			this._EquipmentBreakReport = default(EntityRef<EquipmentBreakReport>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DetailID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid DetailID
		{
			get
			{
				return this._DetailID;
			}
			set
			{
				if ((this._DetailID != value))
				{
					this.OnDetailIDChanging(value);
					this.SendPropertyChanging();
					this._DetailID = value;
					this.SendPropertyChanged("DetailID");
					this.OnDetailIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL")]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					if (this._EquipmentBreakReport.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Index]", Storage="_Index", DbType="Int NOT NULL")]
		public int Index
		{
			get
			{
				return this._Index;
			}
			set
			{
				if ((this._Index != value))
				{
					this.OnIndexChanging(value);
					this.SendPropertyChanging();
					this._Index = value;
					this.SendPropertyChanged("Index");
					this.OnIndexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeID", DbType="Int NOT NULL")]
		public int EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					this.OnEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeID = value;
					this.SendPropertyChanged("EmployeeID");
					this.OnEmployeeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EquipmentBreakReport_EquipmentBreakReportUser", Storage="_EquipmentBreakReport", ThisKey="ID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public EquipmentBreakReport EquipmentBreakReport
		{
			get
			{
				return this._EquipmentBreakReport.Entity;
			}
			set
			{
				EquipmentBreakReport previousValue = this._EquipmentBreakReport.Entity;
				if (((previousValue != value) 
							|| (this._EquipmentBreakReport.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EquipmentBreakReport.Entity = null;
						previousValue.EquipmentBreakReportUsers.Remove(this);
					}
					this._EquipmentBreakReport.Entity = value;
					if ((value != null))
					{
						value.EquipmentBreakReportUsers.Add(this);
						this._ID = value.ID;
					}
					else
					{
						this._ID = default(int);
					}
					this.SendPropertyChanged("EquipmentBreakReport");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Employee")]
	public partial class Employee : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EmployeeID;
		
		private string _Code;
		
		private string _FamilyName;
		
		private string _Name;
		
		private bool _Sex;
		
		private System.DateTime _BirthDate;
		
		private string _BirthPlace;
		
		private string _Ethnic;
		
		private string _PhoneNumber;
		
		private string _Email;
		
		private int _RegencyID;
		
		private int _DepartmentID;
		
		private System.Data.Linq.Binary _Avatar;
		
		private bool _IsManager;
		
		private string _Password;
		
		private EntitySet<EquipmentImportation> _EquipmentImportations;
		
		private EntitySet<EquipmentHandOverReceiver> _EquipmentHandOverReceivers;
		
		private EntitySet<EquipmentHandOverSender> _EquipmentHandOverSenders;
		
		private EntitySet<Permission> _Permissions;
		
		private EntityRef<Department> _Department;
		
		private EntityRef<Regency> _Regency;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEmployeeIDChanging(int value);
    partial void OnEmployeeIDChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnFamilyNameChanging(string value);
    partial void OnFamilyNameChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnSexChanging(bool value);
    partial void OnSexChanged();
    partial void OnBirthDateChanging(System.DateTime value);
    partial void OnBirthDateChanged();
    partial void OnBirthPlaceChanging(string value);
    partial void OnBirthPlaceChanged();
    partial void OnEthnicChanging(string value);
    partial void OnEthnicChanged();
    partial void OnPhoneNumberChanging(string value);
    partial void OnPhoneNumberChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnRegencyIDChanging(int value);
    partial void OnRegencyIDChanged();
    partial void OnDepartmentIDChanging(int value);
    partial void OnDepartmentIDChanged();
    partial void OnAvatarChanging(System.Data.Linq.Binary value);
    partial void OnAvatarChanged();
    partial void OnIsManagerChanging(bool value);
    partial void OnIsManagerChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    #endregion
		
		public Employee()
		{
			this._EquipmentImportations = new EntitySet<EquipmentImportation>(new Action<EquipmentImportation>(this.attach_EquipmentImportations), new Action<EquipmentImportation>(this.detach_EquipmentImportations));
			this._EquipmentHandOverReceivers = new EntitySet<EquipmentHandOverReceiver>(new Action<EquipmentHandOverReceiver>(this.attach_EquipmentHandOverReceivers), new Action<EquipmentHandOverReceiver>(this.detach_EquipmentHandOverReceivers));
			this._EquipmentHandOverSenders = new EntitySet<EquipmentHandOverSender>(new Action<EquipmentHandOverSender>(this.attach_EquipmentHandOverSenders), new Action<EquipmentHandOverSender>(this.detach_EquipmentHandOverSenders));
			this._Permissions = new EntitySet<Permission>(new Action<Permission>(this.attach_Permissions), new Action<Permission>(this.detach_Permissions));
			this._Department = default(EntityRef<Department>);
			this._Regency = default(EntityRef<Regency>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					this.OnEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeID = value;
					this.SendPropertyChanged("EmployeeID");
					this.OnEmployeeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FamilyName", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
		public string FamilyName
		{
			get
			{
				return this._FamilyName;
			}
			set
			{
				if ((this._FamilyName != value))
				{
					this.OnFamilyNameChanging(value);
					this.SendPropertyChanging();
					this._FamilyName = value;
					this.SendPropertyChanged("FamilyName");
					this.OnFamilyNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sex", DbType="Bit NOT NULL")]
		public bool Sex
		{
			get
			{
				return this._Sex;
			}
			set
			{
				if ((this._Sex != value))
				{
					this.OnSexChanging(value);
					this.SendPropertyChanging();
					this._Sex = value;
					this.SendPropertyChanged("Sex");
					this.OnSexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BirthDate", DbType="DateTime NOT NULL")]
		public System.DateTime BirthDate
		{
			get
			{
				return this._BirthDate;
			}
			set
			{
				if ((this._BirthDate != value))
				{
					this.OnBirthDateChanging(value);
					this.SendPropertyChanging();
					this._BirthDate = value;
					this.SendPropertyChanged("BirthDate");
					this.OnBirthDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BirthPlace", DbType="NVarChar(50)")]
		public string BirthPlace
		{
			get
			{
				return this._BirthPlace;
			}
			set
			{
				if ((this._BirthPlace != value))
				{
					this.OnBirthPlaceChanging(value);
					this.SendPropertyChanging();
					this._BirthPlace = value;
					this.SendPropertyChanged("BirthPlace");
					this.OnBirthPlaceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ethnic", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string Ethnic
		{
			get
			{
				return this._Ethnic;
			}
			set
			{
				if ((this._Ethnic != value))
				{
					this.OnEthnicChanging(value);
					this.SendPropertyChanging();
					this._Ethnic = value;
					this.SendPropertyChanged("Ethnic");
					this.OnEthnicChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumber", DbType="NVarChar(20)")]
		public string PhoneNumber
		{
			get
			{
				return this._PhoneNumber;
			}
			set
			{
				if ((this._PhoneNumber != value))
				{
					this.OnPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumber = value;
					this.SendPropertyChanged("PhoneNumber");
					this.OnPhoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(150)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegencyID", DbType="Int NOT NULL")]
		public int RegencyID
		{
			get
			{
				return this._RegencyID;
			}
			set
			{
				if ((this._RegencyID != value))
				{
					if (this._Regency.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRegencyIDChanging(value);
					this.SendPropertyChanging();
					this._RegencyID = value;
					this.SendPropertyChanged("RegencyID");
					this.OnRegencyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepartmentID", DbType="Int NOT NULL")]
		public int DepartmentID
		{
			get
			{
				return this._DepartmentID;
			}
			set
			{
				if ((this._DepartmentID != value))
				{
					if (this._Department.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDepartmentIDChanging(value);
					this.SendPropertyChanging();
					this._DepartmentID = value;
					this.SendPropertyChanged("DepartmentID");
					this.OnDepartmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Avatar", DbType="Image", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Avatar
		{
			get
			{
				return this._Avatar;
			}
			set
			{
				if ((this._Avatar != value))
				{
					this.OnAvatarChanging(value);
					this.SendPropertyChanging();
					this._Avatar = value;
					this.SendPropertyChanged("Avatar");
					this.OnAvatarChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsManager", DbType="Bit NOT NULL")]
		public bool IsManager
		{
			get
			{
				return this._IsManager;
			}
			set
			{
				if ((this._IsManager != value))
				{
					this.OnIsManagerChanging(value);
					this.SendPropertyChanging();
					this._IsManager = value;
					this.SendPropertyChanged("IsManager");
					this.OnIsManagerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(100)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_EquipmentImportation", Storage="_EquipmentImportations", ThisKey="EmployeeID", OtherKey="Deliver")]
		public EntitySet<EquipmentImportation> EquipmentImportations
		{
			get
			{
				return this._EquipmentImportations;
			}
			set
			{
				this._EquipmentImportations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_EquipmentHandOverReceiver", Storage="_EquipmentHandOverReceivers", ThisKey="EmployeeID", OtherKey="EmployeeID")]
		public EntitySet<EquipmentHandOverReceiver> EquipmentHandOverReceivers
		{
			get
			{
				return this._EquipmentHandOverReceivers;
			}
			set
			{
				this._EquipmentHandOverReceivers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_EquipmentHandOverSender", Storage="_EquipmentHandOverSenders", ThisKey="EmployeeID", OtherKey="EmployeeID")]
		public EntitySet<EquipmentHandOverSender> EquipmentHandOverSenders
		{
			get
			{
				return this._EquipmentHandOverSenders;
			}
			set
			{
				this._EquipmentHandOverSenders.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Permission", Storage="_Permissions", ThisKey="EmployeeID", OtherKey="EmployeeID")]
		public EntitySet<Permission> Permissions
		{
			get
			{
				return this._Permissions;
			}
			set
			{
				this._Permissions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_Employee", Storage="_Department", ThisKey="DepartmentID", OtherKey="DepartmentID", IsForeignKey=true)]
		public Department Department
		{
			get
			{
				return this._Department.Entity;
			}
			set
			{
				Department previousValue = this._Department.Entity;
				if (((previousValue != value) 
							|| (this._Department.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Department.Entity = null;
						previousValue.Employees.Remove(this);
					}
					this._Department.Entity = value;
					if ((value != null))
					{
						value.Employees.Add(this);
						this._DepartmentID = value.DepartmentID;
					}
					else
					{
						this._DepartmentID = default(int);
					}
					this.SendPropertyChanged("Department");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Regency_Employee", Storage="_Regency", ThisKey="RegencyID", OtherKey="RegencyID", IsForeignKey=true)]
		public Regency Regency
		{
			get
			{
				return this._Regency.Entity;
			}
			set
			{
				Regency previousValue = this._Regency.Entity;
				if (((previousValue != value) 
							|| (this._Regency.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Regency.Entity = null;
						previousValue.Employees.Remove(this);
					}
					this._Regency.Entity = value;
					if ((value != null))
					{
						value.Employees.Add(this);
						this._RegencyID = value.RegencyID;
					}
					else
					{
						this._RegencyID = default(int);
					}
					this.SendPropertyChanged("Regency");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EquipmentImportations(EquipmentImportation entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_EquipmentImportations(EquipmentImportation entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_EquipmentHandOverReceivers(EquipmentHandOverReceiver entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_EquipmentHandOverReceivers(EquipmentHandOverReceiver entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_EquipmentHandOverSenders(EquipmentHandOverSender entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_EquipmentHandOverSenders(EquipmentHandOverSender entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_Permissions(Permission entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_Permissions(Permission entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Permission")]
	public partial class Permission : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PermissionID;
		
		private int _EmployeeID;
		
		private int _MethodID;
		
		private bool _CanRead;
		
		private bool _CanWrite;
		
		private bool _CanDelete;
		
		private bool _CanAccept;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<Method> _Method;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPermissionIDChanging(int value);
    partial void OnPermissionIDChanged();
    partial void OnEmployeeIDChanging(int value);
    partial void OnEmployeeIDChanged();
    partial void OnMethodIDChanging(int value);
    partial void OnMethodIDChanged();
    partial void OnCanReadChanging(bool value);
    partial void OnCanReadChanged();
    partial void OnCanWriteChanging(bool value);
    partial void OnCanWriteChanged();
    partial void OnCanDeleteChanging(bool value);
    partial void OnCanDeleteChanged();
    partial void OnCanAcceptChanging(bool value);
    partial void OnCanAcceptChanged();
    #endregion
		
		public Permission()
		{
			this._Employee = default(EntityRef<Employee>);
			this._Method = default(EntityRef<Method>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PermissionID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PermissionID
		{
			get
			{
				return this._PermissionID;
			}
			set
			{
				if ((this._PermissionID != value))
				{
					this.OnPermissionIDChanging(value);
					this.SendPropertyChanging();
					this._PermissionID = value;
					this.SendPropertyChanged("PermissionID");
					this.OnPermissionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeID", DbType="Int NOT NULL")]
		public int EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeID = value;
					this.SendPropertyChanged("EmployeeID");
					this.OnEmployeeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MethodID", DbType="Int NOT NULL")]
		public int MethodID
		{
			get
			{
				return this._MethodID;
			}
			set
			{
				if ((this._MethodID != value))
				{
					if (this._Method.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMethodIDChanging(value);
					this.SendPropertyChanging();
					this._MethodID = value;
					this.SendPropertyChanged("MethodID");
					this.OnMethodIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CanRead", DbType="Bit NOT NULL")]
		public bool CanRead
		{
			get
			{
				return this._CanRead;
			}
			set
			{
				if ((this._CanRead != value))
				{
					this.OnCanReadChanging(value);
					this.SendPropertyChanging();
					this._CanRead = value;
					this.SendPropertyChanged("CanRead");
					this.OnCanReadChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CanWrite", DbType="Bit NOT NULL")]
		public bool CanWrite
		{
			get
			{
				return this._CanWrite;
			}
			set
			{
				if ((this._CanWrite != value))
				{
					this.OnCanWriteChanging(value);
					this.SendPropertyChanging();
					this._CanWrite = value;
					this.SendPropertyChanged("CanWrite");
					this.OnCanWriteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CanDelete", DbType="Bit NOT NULL")]
		public bool CanDelete
		{
			get
			{
				return this._CanDelete;
			}
			set
			{
				if ((this._CanDelete != value))
				{
					this.OnCanDeleteChanging(value);
					this.SendPropertyChanging();
					this._CanDelete = value;
					this.SendPropertyChanged("CanDelete");
					this.OnCanDeleteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CanAccept", DbType="Bit NOT NULL")]
		public bool CanAccept
		{
			get
			{
				return this._CanAccept;
			}
			set
			{
				if ((this._CanAccept != value))
				{
					this.OnCanAcceptChanging(value);
					this.SendPropertyChanging();
					this._CanAccept = value;
					this.SendPropertyChanged("CanAccept");
					this.OnCanAcceptChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Permission", Storage="_Employee", ThisKey="EmployeeID", OtherKey="EmployeeID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.Permissions.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.Permissions.Add(this);
						this._EmployeeID = value.EmployeeID;
					}
					else
					{
						this._EmployeeID = default(int);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Method_Permission", Storage="_Method", ThisKey="MethodID", OtherKey="MethodID", IsForeignKey=true)]
		public Method Method
		{
			get
			{
				return this._Method.Entity;
			}
			set
			{
				Method previousValue = this._Method.Entity;
				if (((previousValue != value) 
							|| (this._Method.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Method.Entity = null;
						previousValue.Permissions.Remove(this);
					}
					this._Method.Entity = value;
					if ((value != null))
					{
						value.Permissions.Add(this);
						this._MethodID = value.MethodID;
					}
					else
					{
						this._MethodID = default(int);
					}
					this.SendPropertyChanged("Method");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Equipment")]
	public partial class Equipment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EquipmentID;
		
		private string _Code;
		
		private string _Name;
		
		private string _Number;
		
		private int _EquipmentTypeID;
		
		private int _UnitMeasureID;
		
		private string _Description;
		
		private System.Nullable<int> _ParentEquipmentID;
		
		private EntitySet<EquipmentImportationDetail> _EquipmentImportationDetails;
		
		private EntitySet<EquipmentHandOverDetail> _EquipmentHandOverDetails;
		
		private EntityRef<EquipmentType> _EquipmentType;
		
		private EntityRef<UnitMeasure> _UnitMeasure;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEquipmentIDChanging(int value);
    partial void OnEquipmentIDChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnNumberChanging(string value);
    partial void OnNumberChanged();
    partial void OnEquipmentTypeIDChanging(int value);
    partial void OnEquipmentTypeIDChanged();
    partial void OnUnitMeasureIDChanging(int value);
    partial void OnUnitMeasureIDChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnParentEquipmentIDChanging(System.Nullable<int> value);
    partial void OnParentEquipmentIDChanged();
    #endregion
		
		public Equipment()
		{
			this._EquipmentImportationDetails = new EntitySet<EquipmentImportationDetail>(new Action<EquipmentImportationDetail>(this.attach_EquipmentImportationDetails), new Action<EquipmentImportationDetail>(this.detach_EquipmentImportationDetails));
			this._EquipmentHandOverDetails = new EntitySet<EquipmentHandOverDetail>(new Action<EquipmentHandOverDetail>(this.attach_EquipmentHandOverDetails), new Action<EquipmentHandOverDetail>(this.detach_EquipmentHandOverDetails));
			this._EquipmentType = default(EntityRef<EquipmentType>);
			this._UnitMeasure = default(EntityRef<UnitMeasure>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EquipmentID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int EquipmentID
		{
			get
			{
				return this._EquipmentID;
			}
			set
			{
				if ((this._EquipmentID != value))
				{
					this.OnEquipmentIDChanging(value);
					this.SendPropertyChanging();
					this._EquipmentID = value;
					this.SendPropertyChanged("EquipmentID");
					this.OnEquipmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Number", DbType="NVarChar(30)")]
		public string Number
		{
			get
			{
				return this._Number;
			}
			set
			{
				if ((this._Number != value))
				{
					this.OnNumberChanging(value);
					this.SendPropertyChanging();
					this._Number = value;
					this.SendPropertyChanged("Number");
					this.OnNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EquipmentTypeID", DbType="Int NOT NULL")]
		public int EquipmentTypeID
		{
			get
			{
				return this._EquipmentTypeID;
			}
			set
			{
				if ((this._EquipmentTypeID != value))
				{
					if (this._EquipmentType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEquipmentTypeIDChanging(value);
					this.SendPropertyChanging();
					this._EquipmentTypeID = value;
					this.SendPropertyChanged("EquipmentTypeID");
					this.OnEquipmentTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnitMeasureID", DbType="Int NOT NULL")]
		public int UnitMeasureID
		{
			get
			{
				return this._UnitMeasureID;
			}
			set
			{
				if ((this._UnitMeasureID != value))
				{
					if (this._UnitMeasure.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUnitMeasureIDChanging(value);
					this.SendPropertyChanging();
					this._UnitMeasureID = value;
					this.SendPropertyChanged("UnitMeasureID");
					this.OnUnitMeasureIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(350)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentEquipmentID", DbType="Int")]
		public System.Nullable<int> ParentEquipmentID
		{
			get
			{
				return this._ParentEquipmentID;
			}
			set
			{
				if ((this._ParentEquipmentID != value))
				{
					this.OnParentEquipmentIDChanging(value);
					this.SendPropertyChanging();
					this._ParentEquipmentID = value;
					this.SendPropertyChanged("ParentEquipmentID");
					this.OnParentEquipmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Equipment_EquipmentImportationDetail", Storage="_EquipmentImportationDetails", ThisKey="EquipmentID", OtherKey="EquipmentID")]
		public EntitySet<EquipmentImportationDetail> EquipmentImportationDetails
		{
			get
			{
				return this._EquipmentImportationDetails;
			}
			set
			{
				this._EquipmentImportationDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Equipment_EquipmentHandOverDetail", Storage="_EquipmentHandOverDetails", ThisKey="EquipmentID", OtherKey="EquipmentID")]
		public EntitySet<EquipmentHandOverDetail> EquipmentHandOverDetails
		{
			get
			{
				return this._EquipmentHandOverDetails;
			}
			set
			{
				this._EquipmentHandOverDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EquipmentType_Equipment", Storage="_EquipmentType", ThisKey="EquipmentTypeID", OtherKey="EquipmentTypeID", IsForeignKey=true)]
		public EquipmentType EquipmentType
		{
			get
			{
				return this._EquipmentType.Entity;
			}
			set
			{
				EquipmentType previousValue = this._EquipmentType.Entity;
				if (((previousValue != value) 
							|| (this._EquipmentType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EquipmentType.Entity = null;
						previousValue.Equipments.Remove(this);
					}
					this._EquipmentType.Entity = value;
					if ((value != null))
					{
						value.Equipments.Add(this);
						this._EquipmentTypeID = value.EquipmentTypeID;
					}
					else
					{
						this._EquipmentTypeID = default(int);
					}
					this.SendPropertyChanged("EquipmentType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UnitMeasure_Equipment", Storage="_UnitMeasure", ThisKey="UnitMeasureID", OtherKey="UnitMeasureID", IsForeignKey=true)]
		public UnitMeasure UnitMeasure
		{
			get
			{
				return this._UnitMeasure.Entity;
			}
			set
			{
				UnitMeasure previousValue = this._UnitMeasure.Entity;
				if (((previousValue != value) 
							|| (this._UnitMeasure.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UnitMeasure.Entity = null;
						previousValue.Equipments.Remove(this);
					}
					this._UnitMeasure.Entity = value;
					if ((value != null))
					{
						value.Equipments.Add(this);
						this._UnitMeasureID = value.UnitMeasureID;
					}
					else
					{
						this._UnitMeasureID = default(int);
					}
					this.SendPropertyChanged("UnitMeasure");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EquipmentImportationDetails(EquipmentImportationDetail entity)
		{
			this.SendPropertyChanging();
			entity.Equipment = this;
		}
		
		private void detach_EquipmentImportationDetails(EquipmentImportationDetail entity)
		{
			this.SendPropertyChanging();
			entity.Equipment = null;
		}
		
		private void attach_EquipmentHandOverDetails(EquipmentHandOverDetail entity)
		{
			this.SendPropertyChanging();
			entity.Equipment = this;
		}
		
		private void detach_EquipmentHandOverDetails(EquipmentHandOverDetail entity)
		{
			this.SendPropertyChanging();
			entity.Equipment = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EquipmentTransferITManager")]
	public partial class EquipmentTransferITManager : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _DetailID;
		
		private int _ID;
		
		private int _Index;
		
		private int _EmployeeID;
		
		private EntityRef<EquipmentTransfer> _EquipmentTransfer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDetailIDChanging(System.Guid value);
    partial void OnDetailIDChanged();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnIndexChanging(int value);
    partial void OnIndexChanged();
    partial void OnEmployeeIDChanging(int value);
    partial void OnEmployeeIDChanged();
    #endregion
		
		public EquipmentTransferITManager()
		{
			this._EquipmentTransfer = default(EntityRef<EquipmentTransfer>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DetailID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid DetailID
		{
			get
			{
				return this._DetailID;
			}
			set
			{
				if ((this._DetailID != value))
				{
					this.OnDetailIDChanging(value);
					this.SendPropertyChanging();
					this._DetailID = value;
					this.SendPropertyChanged("DetailID");
					this.OnDetailIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL")]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					if (this._EquipmentTransfer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Index]", Storage="_Index", DbType="Int NOT NULL")]
		public int Index
		{
			get
			{
				return this._Index;
			}
			set
			{
				if ((this._Index != value))
				{
					this.OnIndexChanging(value);
					this.SendPropertyChanging();
					this._Index = value;
					this.SendPropertyChanged("Index");
					this.OnIndexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeID", DbType="Int NOT NULL")]
		public int EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					this.OnEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeID = value;
					this.SendPropertyChanged("EmployeeID");
					this.OnEmployeeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EquipmentTransfer_EquipmentTransferITManager", Storage="_EquipmentTransfer", ThisKey="ID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public EquipmentTransfer EquipmentTransfer
		{
			get
			{
				return this._EquipmentTransfer.Entity;
			}
			set
			{
				EquipmentTransfer previousValue = this._EquipmentTransfer.Entity;
				if (((previousValue != value) 
							|| (this._EquipmentTransfer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EquipmentTransfer.Entity = null;
						previousValue.EquipmentTransferITManagers.Remove(this);
					}
					this._EquipmentTransfer.Entity = value;
					if ((value != null))
					{
						value.EquipmentTransferITManagers.Add(this);
						this._ID = value.ID;
					}
					else
					{
						this._ID = default(int);
					}
					this.SendPropertyChanged("EquipmentTransfer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[National]")]
	public partial class National : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _NationalID;
		
		private string _Name;
		
		private string _Note;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNationalIDChanging(int value);
    partial void OnNationalIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    #endregion
		
		public National()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NationalID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int NationalID
		{
			get
			{
				return this._NationalID;
			}
			set
			{
				if ((this._NationalID != value))
				{
					this.OnNationalIDChanging(value);
					this.SendPropertyChanging();
					this._NationalID = value;
					this.SendPropertyChanged("NationalID");
					this.OnNationalIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Note", DbType="NVarChar(250)")]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this.OnNoteChanging(value);
					this.SendPropertyChanging();
					this._Note = value;
					this.SendPropertyChanged("Note");
					this.OnNoteChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
